{
  "timestamp": "20250915_043633",
  "summary": {
    "total_tests": 174,
    "successful_tests": 133,
    "failed_tests": 41
  },
  "results": [
    {
      "file": "downloaded_rules/sample/proc_creation_win_7zip_exfil_dmp_files.yml",
      "filename": "proc_creation_win_7zip_exfil_dmp_files.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.event.description = *7-Zip* or xdm.source.process.name = *\\7z.exe or xdm.source.process.name = *\\7zr.exe or xdm.source.process.name = *\\7za.exe or xdm.source.process.executable.filename = 7z.exe or xdm.source.process.executable.filename = 7za.exe) and (xdm.source.process.command_line = *.dmp* or xdm.source.process.command_line = *.dump* or xdm.source.process.command_line = *.hdmp*)",
      "rule_info": {
        "title": "7Zip Compressing Dump Files",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.007673978805541992
    },
    {
      "file": "downloaded_rules/sample/proc_creation_win_7zip_password_compression.yml",
      "filename": "proc_creation_win_7zip_password_compression.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.event.description = *7-Zip* or xdm.source.process.name = *\\7z.exe or xdm.source.process.name = *\\7zr.exe or xdm.source.process.name = *\\7za.exe or xdm.source.process.executable.filename = 7z.exe or xdm.source.process.executable.filename = 7za.exe) and xdm.source.process.command_line = * -p* and (xdm.source.process.command_line = * a * or xdm.source.process.command_line = * u *)",
      "rule_info": {
        "title": "Compress Data and Lock With Password for Exfiltration With 7-ZIP",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "frack113"
      },
      "execution_time": 0.006793022155761719
    },
    {
      "file": "downloaded_rules/sample/proc_creation_win_acccheckconsole_execution.yml",
      "filename": "proc_creation_win_acccheckconsole_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\AccCheckConsole.exe or xdm.source.process.executable.filename = AccCheckConsole.exe) and (xdm.source.process.command_line = * -hwnd* or xdm.source.process.command_line = * -process * or xdm.source.process.command_line = * -window *)",
      "rule_info": {
        "title": "Potential DLL Injection Via AccCheckConsole",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.008374452590942383
    },
    {
      "file": "downloaded_rules/sample/proc_creation_win_addinutil_suspicious_cmdline.yml",
      "filename": "proc_creation_win_addinutil_suspicious_cmdline.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Suspicious AddinUtil.EXE CommandLine Execution",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems), Michael McKinley (@McKinleyMike), Tony Latteri (@TheLatteri)"
      },
      "execution_time": 0.028628826141357422,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/sample/proc_creation_win_addinutil_uncommon_child_process.yml",
      "filename": "proc_creation_win_addinutil_uncommon_child_process.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdr_data.causality_actor_process_image_path = *\\addinutil.exe and not (xdm.source.process.name = *:\\Windows\\System32\\conhost.exe or xdm.source.process.name = *:\\Windows\\System32\\werfault.exe or xdm.source.process.name = *:\\Windows\\SysWOW64\\werfault.exe)",
      "rule_info": {
        "title": "Uncommon Child Process Of AddinUtil.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Michael McKinley (@McKinleyMike), Tony Latteri (@TheLatteri)"
      },
      "execution_time": 0.0056607723236083984
    },
    {
      "file": "downloaded_rules/sample/proc_creation_win_addinutil_uncommon_cmdline.yml",
      "filename": "proc_creation_win_addinutil_uncommon_cmdline.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\addinutil.exe or xdm.source.process.executable.filename = AddInUtil.exe) and (xdm.source.process.command_line = *-AddInRoot:* or xdm.source.process.command_line = *-PipelineRoot:*) and not (xdm.source.process.command_line = *-AddInRoot:\"C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VSTA* or xdm.source.process.command_line = *-AddInRoot:C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VSTA* or xdm.source.process.command_line = *-PipelineRoot:\"C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VSTA* or xdm.source.process.command_line = *-PipelineRoot:C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VSTA*)",
      "rule_info": {
        "title": "Uncommon AddinUtil.EXE CommandLine Execution",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Michael McKinley (@McKinleyMike), Tony Latteri (@TheLatteri)"
      },
      "execution_time": 0.006640434265136719
    },
    {
      "file": "downloaded_rules/sample/proc_creation_win_addinutil_uncommon_dir_exec.yml",
      "filename": "proc_creation_win_addinutil_uncommon_dir_exec.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "AddinUtil.EXE Execution From Uncommon Directory",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Michael McKinley (@McKinleyMike), Tony Latteri (@TheLatteri)"
      },
      "execution_time": 0.007275819778442383,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 544, in convert_condition\n    return self.convert_condition_not(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1237, in convert_condition_not\n    self.not_token + self.token_separator + self.convert_condition_group(arg, state)\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/sample/proc_creation_win_adplus_memory_dump.yml",
      "filename": "proc_creation_win_adplus_memory_dump.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\adplus.exe or xdm.source.process.executable.filename = Adplus.exe) and (xdm.source.process.command_line = * -hang * or xdm.source.process.command_line = * -pn * or xdm.source.process.command_line = * -pmn * or xdm.source.process.command_line = * -p * or xdm.source.process.command_line = * -po * or xdm.source.process.command_line = * -c * or xdm.source.process.command_line = * -sc *)",
      "rule_info": {
        "title": "Potential Adplus.EXE Abuse",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.008489370346069336
    },
    {
      "file": "downloaded_rules/sample/proc_creation_win_agentexecutor_potential_abuse.yml",
      "filename": "proc_creation_win_agentexecutor_potential_abuse.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = \\AgentExecutor.exe or xdm.source.process.executable.filename = AgentExecutor.exe) and (xdm.source.process.command_line = * -powershell* or xdm.source.process.command_line = * -remediationScript*) and not xdr_data.causality_actor_process_image_path = *\\Microsoft.Management.Services.IntuneWindowsAgent.exe",
      "rule_info": {
        "title": "AgentExecutor PowerShell Execution",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems), memory-shards"
      },
      "execution_time": 0.007707357406616211
    },
    {
      "file": "downloaded_rules/sample/proc_creation_win_agentexecutor_susp_usage.yml",
      "filename": "proc_creation_win_agentexecutor_susp_usage.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Suspicious AgentExecutor PowerShell Execution",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems), memory-shards"
      },
      "execution_time": 0.013619661331176758,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 544, in convert_condition\n    return self.convert_condition_not(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1237, in convert_condition_not\n    self.not_token + self.token_separator + self.convert_condition_group(arg, state)\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/sample/proc_creation_lnx_apt_shell_execution.yml",
      "filename": "proc_creation_lnx_apt_shell_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = */apt or xdm.source.process.name = */apt-get) and xdm.source.process.command_line = *APT::Update::Pre-Invoke::=*",
      "rule_info": {
        "title": "Shell Invocation via Apt - Linux",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "linux"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.006647586822509766
    },
    {
      "file": "downloaded_rules/sample/proc_creation_lnx_at_command.yml",
      "filename": "proc_creation_lnx_at_command.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = */at or xdm.source.process.name = */atd",
      "rule_info": {
        "title": "Scheduled Task/Job At",
        "level": "low",
        "logsource": {
          "product": "linux",
          "category": "process_creation"
        },
        "author": "\u00d6mer G\u00fcnal, oscd.community"
      },
      "execution_time": 0.004942655563354492
    },
    {
      "file": "downloaded_rules/sample/proc_creation_lnx_awk_shell_spawn.yml",
      "filename": "proc_creation_lnx_awk_shell_spawn.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = */awk or xdm.source.process.name = */gawk or xdm.source.process.name = */mawk or xdm.source.process.name = */nawk) and xdm.source.process.command_line = *BEGIN {system* and (xdm.source.process.command_line = */bin/bash* or xdm.source.process.command_line = */bin/dash* or xdm.source.process.command_line = */bin/fish* or xdm.source.process.command_line = */bin/sh* or xdm.source.process.command_line = */bin/zsh*)",
      "rule_info": {
        "title": "Suspicious Invocation of Shell via AWK - Linux",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "linux"
        },
        "author": "Li Ling, Andy Parkidomo, Robert Rakowski, Blake Hartstein (Bloomberg L.P.)"
      },
      "execution_time": 0.005549907684326172
    },
    {
      "file": "downloaded_rules/sample/proc_creation_lnx_base64_decode.yml",
      "filename": "proc_creation_lnx_base64_decode.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = */base64 and xdm.source.process.command_line = *-d*",
      "rule_info": {
        "title": "Decode Base64 Encoded Text",
        "level": "low",
        "logsource": {
          "category": "process_creation",
          "product": "linux"
        },
        "author": "Daniil Yugoslavskiy, oscd.community"
      },
      "execution_time": 0.0040988922119140625
    },
    {
      "file": "downloaded_rules/sample/proc_creation_lnx_base64_execution.yml",
      "filename": "proc_creation_lnx_base64_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.command_line = *base64 * and (xdm.source.process.command_line = *| bash * or xdm.source.process.command_line = *| sh * or xdm.source.process.command_line = *|bash * or xdm.source.process.command_line = *|sh * or xdm.source.process.command_line = * |sh or xdm.source.process.command_line = *| bash or xdm.source.process.command_line = *| sh or xdm.source.process.command_line = *|bash)",
      "rule_info": {
        "title": "Linux Base64 Encoded Pipe to Shell",
        "level": "medium",
        "logsource": {
          "product": "linux",
          "category": "process_creation"
        },
        "author": "pH-T (Nextron Systems)"
      },
      "execution_time": 0.00899815559387207
    },
    {
      "file": "downloaded_rules/sample/proc_creation_lnx_base64_shebang_cli.yml",
      "filename": "proc_creation_lnx_base64_shebang_cli.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.command_line = *IyEvYmluL2Jhc2* or xdm.source.process.command_line = *IyEvYmluL2Rhc2* or xdm.source.process.command_line = *IyEvYmluL3pza* or xdm.source.process.command_line = *IyEvYmluL2Zpc2* or xdm.source.process.command_line = *IyEvYmluL3No*",
      "rule_info": {
        "title": "Linux Base64 Encoded Shebang In CLI",
        "level": "medium",
        "logsource": {
          "product": "linux",
          "category": "process_creation"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.006766557693481445
    },
    {
      "file": "downloaded_rules/sample/proc_creation_lnx_bash_interactive_shell.yml",
      "filename": "proc_creation_lnx_bash_interactive_shell.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = */bash and xdm.source.process.command_line = * -i *",
      "rule_info": {
        "title": "Bash Interactive Shell",
        "level": "low",
        "logsource": {
          "category": "process_creation",
          "product": "linux"
        },
        "author": "@d4ns4n_"
      },
      "execution_time": 0.004940509796142578
    },
    {
      "file": "downloaded_rules/sample/proc_creation_lnx_bpf_kprob_tracing_enabled.yml",
      "filename": "proc_creation_lnx_bpf_kprob_tracing_enabled.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.command_line = *echo 1 >* and xdm.source.process.command_line = */sys/kernel/debug/tracing/events/kprobes/* and (xdm.source.process.command_line = */myprobe/enable* or xdm.source.process.command_line = */myretprobe/enable*)",
      "rule_info": {
        "title": "Enable BPF Kprobes Tracing",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "linux"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.0061757564544677734
    },
    {
      "file": "downloaded_rules/sample/proc_creation_lnx_bpftrace_unsafe_option_usage.yml",
      "filename": "proc_creation_lnx_bpftrace_unsafe_option_usage.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *bpftrace and xdm.source.process.command_line = *--unsafe*",
      "rule_info": {
        "title": "BPFtrace Unsafe Option Usage",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "linux"
        },
        "author": "Andreas Hunkeler (@Karneades)"
      },
      "execution_time": 0.004011869430541992
    },
    {
      "file": "downloaded_rules/sample/proc_creation_lnx_capa_discovery.yml",
      "filename": "proc_creation_lnx_capa_discovery.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = */getcap and (xdm.source.process.command_line = * -r * or xdm.source.process.command_line = * /r * or xdm.source.process.command_line = * \u2013r * or xdm.source.process.command_line = * \u2014r * or xdm.source.process.command_line = * \u2015r *)",
      "rule_info": {
        "title": "Capabilities Discovery - Linux",
        "level": "low",
        "logsource": {
          "category": "process_creation",
          "product": "linux"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.0047266483306884766
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_7zip_exfil_dmp_files.yml",
      "filename": "proc_creation_win_7zip_exfil_dmp_files.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.event.description = *7-Zip* or xdm.source.process.name = *\\7z.exe or xdm.source.process.name = *\\7zr.exe or xdm.source.process.name = *\\7za.exe or xdm.source.process.executable.filename = 7z.exe or xdm.source.process.executable.filename = 7za.exe) and (xdm.source.process.command_line = *.dmp* or xdm.source.process.command_line = *.dump* or xdm.source.process.command_line = *.hdmp*)",
      "rule_info": {
        "title": "7Zip Compressing Dump Files",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.0066699981689453125
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_7zip_password_compression.yml",
      "filename": "proc_creation_win_7zip_password_compression.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.event.description = *7-Zip* or xdm.source.process.name = *\\7z.exe or xdm.source.process.name = *\\7zr.exe or xdm.source.process.name = *\\7za.exe or xdm.source.process.executable.filename = 7z.exe or xdm.source.process.executable.filename = 7za.exe) and xdm.source.process.command_line = * -p* and (xdm.source.process.command_line = * a * or xdm.source.process.command_line = * u *)",
      "rule_info": {
        "title": "Compress Data and Lock With Password for Exfiltration With 7-ZIP",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "frack113"
      },
      "execution_time": 0.00563812255859375
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_acccheckconsole_execution.yml",
      "filename": "proc_creation_win_acccheckconsole_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\AccCheckConsole.exe or xdm.source.process.executable.filename = AccCheckConsole.exe) and (xdm.source.process.command_line = * -hwnd* or xdm.source.process.command_line = * -process * or xdm.source.process.command_line = * -window *)",
      "rule_info": {
        "title": "Potential DLL Injection Via AccCheckConsole",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.006146669387817383
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_addinutil_suspicious_cmdline.yml",
      "filename": "proc_creation_win_addinutil_suspicious_cmdline.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Suspicious AddinUtil.EXE CommandLine Execution",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems), Michael McKinley (@McKinleyMike), Tony Latteri (@TheLatteri)"
      },
      "execution_time": 0.020021915435791016,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_addinutil_uncommon_child_process.yml",
      "filename": "proc_creation_win_addinutil_uncommon_child_process.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdr_data.causality_actor_process_image_path = *\\addinutil.exe and not (xdm.source.process.name = *:\\Windows\\System32\\conhost.exe or xdm.source.process.name = *:\\Windows\\System32\\werfault.exe or xdm.source.process.name = *:\\Windows\\SysWOW64\\werfault.exe)",
      "rule_info": {
        "title": "Uncommon Child Process Of AddinUtil.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Michael McKinley (@McKinleyMike), Tony Latteri (@TheLatteri)"
      },
      "execution_time": 0.005223274230957031
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_addinutil_uncommon_cmdline.yml",
      "filename": "proc_creation_win_addinutil_uncommon_cmdline.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\addinutil.exe or xdm.source.process.executable.filename = AddInUtil.exe) and (xdm.source.process.command_line = *-AddInRoot:* or xdm.source.process.command_line = *-PipelineRoot:*) and not (xdm.source.process.command_line = *-AddInRoot:\"C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VSTA* or xdm.source.process.command_line = *-AddInRoot:C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VSTA* or xdm.source.process.command_line = *-PipelineRoot:\"C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VSTA* or xdm.source.process.command_line = *-PipelineRoot:C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VSTA*)",
      "rule_info": {
        "title": "Uncommon AddinUtil.EXE CommandLine Execution",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Michael McKinley (@McKinleyMike), Tony Latteri (@TheLatteri)"
      },
      "execution_time": 0.006211042404174805
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_addinutil_uncommon_dir_exec.yml",
      "filename": "proc_creation_win_addinutil_uncommon_dir_exec.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "AddinUtil.EXE Execution From Uncommon Directory",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Michael McKinley (@McKinleyMike), Tony Latteri (@TheLatteri)"
      },
      "execution_time": 0.008115530014038086,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 544, in convert_condition\n    return self.convert_condition_not(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1237, in convert_condition_not\n    self.not_token + self.token_separator + self.convert_condition_group(arg, state)\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_adplus_memory_dump.yml",
      "filename": "proc_creation_win_adplus_memory_dump.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\adplus.exe or xdm.source.process.executable.filename = Adplus.exe) and (xdm.source.process.command_line = * -hang * or xdm.source.process.command_line = * -pn * or xdm.source.process.command_line = * -pmn * or xdm.source.process.command_line = * -p * or xdm.source.process.command_line = * -po * or xdm.source.process.command_line = * -c * or xdm.source.process.command_line = * -sc *)",
      "rule_info": {
        "title": "Potential Adplus.EXE Abuse",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.006263256072998047
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_agentexecutor_potential_abuse.yml",
      "filename": "proc_creation_win_agentexecutor_potential_abuse.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = \\AgentExecutor.exe or xdm.source.process.executable.filename = AgentExecutor.exe) and (xdm.source.process.command_line = * -powershell* or xdm.source.process.command_line = * -remediationScript*) and not xdr_data.causality_actor_process_image_path = *\\Microsoft.Management.Services.IntuneWindowsAgent.exe",
      "rule_info": {
        "title": "AgentExecutor PowerShell Execution",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems), memory-shards"
      },
      "execution_time": 0.007983207702636719
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_agentexecutor_susp_usage.yml",
      "filename": "proc_creation_win_agentexecutor_susp_usage.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Suspicious AgentExecutor PowerShell Execution",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems), memory-shards"
      },
      "execution_time": 0.011737585067749023,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 544, in convert_condition\n    return self.convert_condition_not(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1237, in convert_condition_not\n    self.not_token + self.token_separator + self.convert_condition_group(arg, state)\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_appvlp_uncommon_child_process.yml",
      "filename": "proc_creation_win_appvlp_uncommon_child_process.yml",
      "status": "failed",
      "error": "Operator 'and' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Uncommon Child Process Of Appvlp.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Sreeman"
      },
      "execution_time": 0.014138936996459961,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 544, in convert_condition\n    return self.convert_condition_not(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1237, in convert_condition_not\n    self.not_token + self.token_separator + self.convert_condition_group(arg, state)\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1227, in convert_condition_and\n    raise NotImplementedError(\"Operator 'and' not supported by the backend\")\nNotImplementedError: Operator 'and' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_aspnet_compiler_exectuion.yml",
      "filename": "proc_creation_win_aspnet_compiler_exectuion.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "AspNetCompiler Execution",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "frack113"
      },
      "execution_time": 0.007134437561035156,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_aspnet_compiler_susp_child_process.yml",
      "filename": "proc_creation_win_aspnet_compiler_susp_child_process.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Suspicious Child Process of AspNetCompiler",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.01262211799621582,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_aspnet_compiler_susp_paths.yml",
      "filename": "proc_creation_win_aspnet_compiler_susp_paths.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Potentially Suspicious ASP.NET Compilation Via AspNetCompiler",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.02030467987060547,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_at_interactive_execution.yml",
      "filename": "proc_creation_win_at_interactive_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\at.exe and xdm.source.process.command_line = *interactive*",
      "rule_info": {
        "title": "Interactive AT Job",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community"
      },
      "execution_time": 0.014852523803710938
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_atbroker_uncommon_ats_execution.yml",
      "filename": "proc_creation_win_atbroker_uncommon_ats_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\AtBroker.exe or xdm.source.process.executable.filename = AtBroker.exe) and xdm.source.process.command_line = *start* and not (xdm.source.process.command_line = *animations* or xdm.source.process.command_line = *audiodescription* or xdm.source.process.command_line = *caretbrowsing* or xdm.source.process.command_line = *caretwidth* or xdm.source.process.command_line = *colorfiltering* or xdm.source.process.command_line = *cursorindicator* or xdm.source.process.command_line = *cursorscheme* or xdm.source.process.command_line = *filterkeys* or xdm.source.process.command_line = *focusborderheight* or xdm.source.process.command_line = *focusborderwidth* or xdm.source.process.command_line = *highcontrast* or xdm.source.process.command_line = *keyboardcues* or xdm.source.process.command_line = *keyboardpref* or xdm.source.process.command_line = *livecaptions* or xdm.source.process.command_line = *magnifierpane* or xdm.source.process.command_line = *messageduration* or xdm.source.process.command_line = *minimumhitradius* or xdm.source.process.command_line = *mousekeys* or xdm.source.process.command_line = *Narrator* or xdm.source.process.command_line = *osk* or xdm.source.process.command_line = *overlappedcontent* or xdm.source.process.command_line = *showsounds* or xdm.source.process.command_line = *soundsentry* or xdm.source.process.command_line = *speechreco* or xdm.source.process.command_line = *stickykeys* or xdm.source.process.command_line = *togglekeys* or xdm.source.process.command_line = *voiceaccess* or xdm.source.process.command_line = *windowarranging* or xdm.source.process.command_line = *windowtracking* or xdm.source.process.command_line = *windowtrackingtimeout* or xdm.source.process.command_line = *windowtrackingzorder*) and not xdm.source.process.command_line = *Oracle_JavaAccessBridge*",
      "rule_info": {
        "title": "Uncommon  Assistive Technology Applications Execution Via AtBroker.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Mateusz Wydra, oscd.community"
      },
      "execution_time": 0.014315366744995117
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_attrib_hiding_files.yml",
      "filename": "proc_creation_win_attrib_hiding_files.yml",
      "status": "failed",
      "error": "Operator 'and' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Hiding Files with Attrib.exe",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Sami Ruohonen"
      },
      "execution_time": 0.012523174285888672,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 66, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 544, in convert_condition\n    return self.convert_condition_not(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1237, in convert_condition_not\n    self.not_token + self.token_separator + self.convert_condition_group(arg, state)\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1227, in convert_condition_and\n    raise NotImplementedError(\"Operator 'and' not supported by the backend\")\nNotImplementedError: Operator 'and' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_attrib_system_susp_paths.yml",
      "filename": "proc_creation_win_attrib_system_susp_paths.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Set Suspicious Files as System Files Using Attrib.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.011030912399291992,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_auditpol_nt_resource_kit_usage.yml",
      "filename": "proc_creation_win_auditpol_nt_resource_kit_usage.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.command_line = */logon:none* or xdm.source.process.command_line = */system:none* or xdm.source.process.command_line = */sam:none* or xdm.source.process.command_line = */privilege:none* or xdm.source.process.command_line = */object:none* or xdm.source.process.command_line = */process:none* or xdm.source.process.command_line = */policy:none*",
      "rule_info": {
        "title": "Audit Policy Tampering Via NT Resource Kit Auditpol",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.005387783050537109
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_auditpol_susp_execution.yml",
      "filename": "proc_creation_win_auditpol_susp_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\auditpol.exe or xdm.source.process.executable.filename = AUDITPOL.EXE) and (xdm.source.process.command_line = *disable* or xdm.source.process.command_line = *clear* or xdm.source.process.command_line = *remove* or xdm.source.process.command_line = *restore*)",
      "rule_info": {
        "title": "Audit Policy Tampering Via Auditpol",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Janantha Marasinghe (https://github.com/blueteam0ps)"
      },
      "execution_time": 0.012136220932006836
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_autorun_registry_modified_via_wmic.yml",
      "filename": "proc_creation_win_autorun_registry_modified_via_wmic.yml",
      "status": "failed",
      "error": "Operator 'and' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Suspicious Autorun Registry Modified via WMI",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Swachchhanda Shrawan Poudel (Nextron Systems)"
      },
      "execution_time": 0.02958512306213379,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1227, in convert_condition_and\n    raise NotImplementedError(\"Operator 'and' not supported by the backend\")\nNotImplementedError: Operator 'and' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_bash_command_execution.yml",
      "filename": "proc_creation_win_bash_command_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *:\\Windows\\System32\\bash.exe or xdm.source.process.name = *:\\Windows\\SysWOW64\\bash.exe or xdm.source.process.executable.filename = Bash.exe) and xdm.source.process.command_line = * -c *",
      "rule_info": {
        "title": "Indirect Inline Command Execution Via Bash.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "frack113"
      },
      "execution_time": 0.005671262741088867
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_bash_file_execution.yml",
      "filename": "proc_creation_win_bash_file_execution.yml",
      "status": "failed",
      "error": "'NoneType' object has no attribute 'format' (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Indirect Command Execution From Script File Via Bash.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.008734703063964844,
      "error_type": "AttributeError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 544, in convert_condition\n    return self.convert_condition_not(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1237, in convert_condition_not\n    self.not_token + self.token_separator + self.convert_condition_group(arg, state)\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 454, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_null(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1618, in convert_condition_field_eq_val_null\n    return self.field_null_expression.format(field=self.escape_and_quote_field(cond.field))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: 'NoneType' object has no attribute 'format' (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_bcdedit_boot_conf_tamper.yml",
      "filename": "proc_creation_win_bcdedit_boot_conf_tamper.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\bcdedit.exe or xdm.source.process.executable.filename = bcdedit.exe) and xdm.source.process.command_line = *set* and (xdm.source.process.command_line = *bootstatuspolicy* and xdm.source.process.command_line = *ignoreallfailures* or xdm.source.process.command_line = *recoveryenabled* and xdm.source.process.command_line = *no*)",
      "rule_info": {
        "title": "Boot Configuration Tampering Via Bcdedit.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community"
      },
      "execution_time": 0.0063571929931640625
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_bcdedit_susp_execution.yml",
      "filename": "proc_creation_win_bcdedit_susp_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\bcdedit.exe or xdm.source.process.executable.filename = bcdedit.exe) and (xdm.source.process.command_line = *delete* or xdm.source.process.command_line = *deletevalue* or xdm.source.process.command_line = *import* or xdm.source.process.command_line = *safeboot* or xdm.source.process.command_line = *network*)",
      "rule_info": {
        "title": "Potential Ransomware or Unauthorized MBR Tampering Via Bcdedit.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "@neu5ron"
      },
      "execution_time": 0.005136013031005859
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_bcp_export_data.yml",
      "filename": "proc_creation_win_bcp_export_data.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\bcp.exe or xdm.source.process.executable.filename = BCP.exe) and (xdm.source.process.command_line = * out * or xdm.source.process.command_line = * queryout *)",
      "rule_info": {
        "title": "Data Export From MSSQL Table Via BCP.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Omar Khaled (@beacon_exe), MahirAli Khan (in/mahiralikhan), Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.005650520324707031
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_bginfo_suspicious_child_process.yml",
      "filename": "proc_creation_win_bginfo_suspicious_child_process.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Suspicious Child Process Of BgInfo.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.008374452590942383,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_bginfo_uncommon_child_process.yml",
      "filename": "proc_creation_win_bginfo_uncommon_child_process.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdr_data.causality_actor_process_image_path = *\\bginfo.exe or xdr_data.causality_actor_process_image_path = *\\bginfo64.exe",
      "rule_info": {
        "title": "Uncommon Child Process Of BgInfo.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems), Beyu Denis, oscd.community"
      },
      "execution_time": 0.005302906036376953
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_bitlockertogo_execution.yml",
      "filename": "proc_creation_win_bitlockertogo_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\BitLockerToGo.exe",
      "rule_info": {
        "title": "BitLockerTogo.EXE Execution",
        "level": "low",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Josh Nickels, mttaggart"
      },
      "execution_time": 0.0044596195220947266
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_bitsadmin_download.yml",
      "filename": "proc_creation_win_bitsadmin_download.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\bitsadmin.exe or xdm.source.process.executable.filename = bitsadmin.exe) and (xdm.source.process.command_line = * /transfer * or (xdm.source.process.command_line = * /create * or xdm.source.process.command_line = * /addfile *) and xdm.source.process.command_line = *http*)",
      "rule_info": {
        "title": "File Download Via Bitsadmin",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Michael Haag, FPT.EagleEye"
      },
      "execution_time": 0.016842126846313477
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_bitsadmin_download_direct_ip.yml",
      "filename": "proc_creation_win_bitsadmin_download_direct_ip.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\bitsadmin.exe or xdm.source.process.executable.filename = bitsadmin.exe) and (xdm.source.process.command_line = * /transfer * or xdm.source.process.command_line = * /create * or xdm.source.process.command_line = * /addfile *) and (xdm.source.process.command_line = *://1* or xdm.source.process.command_line = *://2* or xdm.source.process.command_line = *://3* or xdm.source.process.command_line = *://4* or xdm.source.process.command_line = *://5* or xdm.source.process.command_line = *://6* or xdm.source.process.command_line = *://7* or xdm.source.process.command_line = *://8* or xdm.source.process.command_line = *://9*) and not xdm.source.process.command_line = *://7-*",
      "rule_info": {
        "title": "Suspicious Download From Direct IP Via Bitsadmin",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.017354965209960938
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_bitsadmin_download_file_sharing_domains.yml",
      "filename": "proc_creation_win_bitsadmin_download_file_sharing_domains.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\bitsadmin.exe or xdm.source.process.executable.filename = bitsadmin.exe) and (xdm.source.process.command_line = * /transfer * or xdm.source.process.command_line = * /create * or xdm.source.process.command_line = * /addfile *) and (xdm.source.process.command_line = *.githubusercontent.com* or xdm.source.process.command_line = *anonfiles.com* or xdm.source.process.command_line = *cdn.discordapp.com* or xdm.source.process.command_line = *ddns.net* or xdm.source.process.command_line = *dl.dropboxusercontent.com* or xdm.source.process.command_line = *ghostbin.co* or xdm.source.process.command_line = *glitch.me* or xdm.source.process.command_line = *gofile.io* or xdm.source.process.command_line = *hastebin.com* or xdm.source.process.command_line = *mediafire.com* or xdm.source.process.command_line = *mega.nz* or xdm.source.process.command_line = *onrender.com* or xdm.source.process.command_line = *pages.dev* or xdm.source.process.command_line = *paste.ee* or xdm.source.process.command_line = *pastebin.com* or xdm.source.process.command_line = *pastebin.pl* or xdm.source.process.command_line = *pastetext.net* or xdm.source.process.command_line = *privatlab.com* or xdm.source.process.command_line = *privatlab.net* or xdm.source.process.command_line = *send.exploit.in* or xdm.source.process.command_line = *sendspace.com* or xdm.source.process.command_line = *storage.googleapis.com* or xdm.source.process.command_line = *storjshare.io* or xdm.source.process.command_line = *supabase.co* or xdm.source.process.command_line = *temp.sh* or xdm.source.process.command_line = *transfer.sh* or xdm.source.process.command_line = *trycloudflare.com* or xdm.source.process.command_line = *ufile.io* or xdm.source.process.command_line = *w3spaces.com* or xdm.source.process.command_line = *workers.dev*)",
      "rule_info": {
        "title": "Suspicious Download From File-Sharing Website Via Bitsadmin",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.010547637939453125
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_bitsadmin_download_susp_extensions.yml",
      "filename": "proc_creation_win_bitsadmin_download_susp_extensions.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\bitsadmin.exe or xdm.source.process.executable.filename = bitsadmin.exe) and (xdm.source.process.command_line = * /transfer * or xdm.source.process.command_line = * /create * or xdm.source.process.command_line = * /addfile *) and (xdm.source.process.command_line = *.7z* or xdm.source.process.command_line = *.asax* or xdm.source.process.command_line = *.ashx* or xdm.source.process.command_line = *.asmx* or xdm.source.process.command_line = *.asp* or xdm.source.process.command_line = *.aspx* or xdm.source.process.command_line = *.bat* or xdm.source.process.command_line = *.cfm* or xdm.source.process.command_line = *.cgi* or xdm.source.process.command_line = *.chm* or xdm.source.process.command_line = *.cmd* or xdm.source.process.command_line = *.dll* or xdm.source.process.command_line = *.gif* or xdm.source.process.command_line = *.jpeg* or xdm.source.process.command_line = *.jpg* or xdm.source.process.command_line = *.jsp* or xdm.source.process.command_line = *.jspx* or xdm.source.process.command_line = *.log* or xdm.source.process.command_line = *.png* or xdm.source.process.command_line = *.ps1* or xdm.source.process.command_line = *.psm1* or xdm.source.process.command_line = *.rar* or xdm.source.process.command_line = *.scf* or xdm.source.process.command_line = *.sct* or xdm.source.process.command_line = *.txt* or xdm.source.process.command_line = *.vbe* or xdm.source.process.command_line = *.vbs* or xdm.source.process.command_line = *.war* or xdm.source.process.command_line = *.wsf* or xdm.source.process.command_line = *.wsh* or xdm.source.process.command_line = *.xll* or xdm.source.process.command_line = *.zip*)",
      "rule_info": {
        "title": "File With Suspicious Extension Downloaded Via Bitsadmin",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.012547016143798828
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_bitsadmin_download_susp_targetfolder.yml",
      "filename": "proc_creation_win_bitsadmin_download_susp_targetfolder.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "File Download Via Bitsadmin To A Suspicious Target Folder",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.009396791458129883,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_bitsadmin_download_uncommon_targetfolder.yml",
      "filename": "proc_creation_win_bitsadmin_download_uncommon_targetfolder.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "File Download Via Bitsadmin To An Uncommon Target Folder",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.010704994201660156,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_bitsadmin_potential_persistence.yml",
      "filename": "proc_creation_win_bitsadmin_potential_persistence.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\bitsadmin.exe or xdm.source.process.executable.filename = bitsadmin.exe) and (xdm.source.process.command_line = */SetNotifyCmdLine* and (xdm.source.process.command_line = *%COMSPEC%* or xdm.source.process.command_line = *cmd.exe* or xdm.source.process.command_line = *regsvr32.exe*) or xdm.source.process.command_line = */Addfile* and (xdm.source.process.command_line = *http:* or xdm.source.process.command_line = *https:* or xdm.source.process.command_line = *ftp:* or xdm.source.process.command_line = *ftps:*))",
      "rule_info": {
        "title": "Monitoring For Persistence Via BITS",
        "level": "medium",
        "logsource": {
          "product": "windows",
          "category": "process_creation"
        },
        "author": "Sreeman"
      },
      "execution_time": 0.024724721908569336
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_browsers_chromium_headless_debugging.yml",
      "filename": "proc_creation_win_browsers_chromium_headless_debugging.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.command_line = *--remote-debugging-* and xdm.source.process.command_line = *--user-data-dir* and xdm.source.process.command_line = *--headless*",
      "rule_info": {
        "title": "Potential Data Stealing Via Chromium Headless Debugging",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.006124734878540039
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_browsers_chromium_headless_exec.yml",
      "filename": "proc_creation_win_browsers_chromium_headless_exec.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\brave.exe or xdm.source.process.name = *\\chrome.exe or xdm.source.process.name = *\\msedge.exe or xdm.source.process.name = *\\opera.exe or xdm.source.process.name = *\\vivaldi.exe) and xdm.source.process.command_line = *--headless*",
      "rule_info": {
        "title": "Browser Execution In Headless Mode",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.007340192794799805
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_browsers_chromium_headless_file_download.yml",
      "filename": "proc_creation_win_browsers_chromium_headless_file_download.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\brave.exe or xdm.source.process.name = *\\chrome.exe or xdm.source.process.name = *\\msedge.exe or xdm.source.process.name = *\\opera.exe or xdm.source.process.name = *\\vivaldi.exe) and xdm.source.process.command_line = *--headless* and xdm.source.process.command_line = *dump-dom* and xdm.source.process.command_line = *http*",
      "rule_info": {
        "title": "File Download with Headless Browser",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Sreeman, Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.008099079132080078
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_browsers_chromium_load_extension.yml",
      "filename": "proc_creation_win_browsers_chromium_load_extension.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\brave.exe or xdm.source.process.name = *\\chrome.exe or xdm.source.process.name = *\\msedge.exe or xdm.source.process.name = *\\opera.exe or xdm.source.process.name = *\\vivaldi.exe) and xdm.source.process.command_line = *--load-extension=*",
      "rule_info": {
        "title": "Chromium Browser Instance Executed With Custom Extension",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Aedan Russell, frack113, X__Junior (Nextron Systems)"
      },
      "execution_time": 0.010536909103393555
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_browsers_chromium_mockbin_abuse.yml",
      "filename": "proc_creation_win_browsers_chromium_mockbin_abuse.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\brave.exe or xdm.source.process.name = *\\chrome.exe or xdm.source.process.name = *\\msedge.exe or xdm.source.process.name = *\\opera.exe or xdm.source.process.name = *\\vivaldi.exe) and xdm.source.process.command_line = *--headless* and (xdm.source.process.command_line = *://run.mocky* or xdm.source.process.command_line = *://mockbin*)",
      "rule_info": {
        "title": "Chromium Browser Headless Execution To Mockbin Like Site",
        "level": "high",
        "logsource": {
          "product": "windows",
          "category": "process_creation"
        },
        "author": "X__Junior (Nextron Systems)"
      },
      "execution_time": 0.008164644241333008
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_browsers_chromium_susp_load_extension.yml",
      "filename": "proc_creation_win_browsers_chromium_susp_load_extension.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdr_data.causality_actor_process_image_path = *\\cmd.exe or xdr_data.causality_actor_process_image_path = *\\cscript.exe or xdr_data.causality_actor_process_image_path = *\\mshta.exe or xdr_data.causality_actor_process_image_path = *\\powershell.exe or xdr_data.causality_actor_process_image_path = *\\pwsh.exe or xdr_data.causality_actor_process_image_path = *\\regsvr32.exe or xdr_data.causality_actor_process_image_path = *\\rundll32.exe or xdr_data.causality_actor_process_image_path = *\\wscript.exe) and (xdm.source.process.name = *\\brave.exe or xdm.source.process.name = *\\chrome.exe or xdm.source.process.name = *\\msedge.exe or xdm.source.process.name = *\\opera.exe or xdm.source.process.name = *\\vivaldi.exe) and xdm.source.process.command_line = *--load-extension=*",
      "rule_info": {
        "title": "Suspicious Chromium Browser Instance Executed With Custom Extension",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Aedan Russell, frack113, X__Junior (Nextron Systems)"
      },
      "execution_time": 0.011504173278808594
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_browsers_inline_file_download.yml",
      "filename": "proc_creation_win_browsers_inline_file_download.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\brave.exe or xdm.source.process.name = *\\chrome.exe or xdm.source.process.name = *\\msedge.exe or xdm.source.process.name = *\\opera.exe or xdm.source.process.name = *\\vivaldi.exe) and xdm.source.process.command_line = *http* and (xdm.source.process.command_line = *.7z or xdm.source.process.command_line = *.dat or xdm.source.process.command_line = *.dll or xdm.source.process.command_line = *.exe or xdm.source.process.command_line = *.hta or xdm.source.process.command_line = *.ps1 or xdm.source.process.command_line = *.psm1 or xdm.source.process.command_line = *.txt or xdm.source.process.command_line = *.vbe or xdm.source.process.command_line = *.vbs or xdm.source.process.command_line = *.zip)",
      "rule_info": {
        "title": "File Download From Browser Process Via Inline URL",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.010223388671875
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_browsers_remote_debugging.yml",
      "filename": "proc_creation_win_browsers_remote_debugging.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.command_line = * --remote-debugging-* or xdm.source.process.name = *\\firefox.exe and xdm.source.process.command_line = * -start-debugger-server*",
      "rule_info": {
        "title": "Browser Started with Remote Debugging",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "pH-T (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.009411334991455078
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_browsers_tor_execution.yml",
      "filename": "proc_creation_win_browsers_tor_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\tor.exe or xdm.source.process.name = *\\Tor Browser\\Browser\\firefox.exe",
      "rule_info": {
        "title": "Tor Client/Browser Execution",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "frack113"
      },
      "execution_time": 0.004171848297119141
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_calc_uncommon_exec.yml",
      "filename": "proc_creation_win_calc_uncommon_exec.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Suspicious Calculator Usage",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.018532991409301758,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 544, in convert_condition\n    return self.convert_condition_not(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1237, in convert_condition_not\n    self.not_token + self.token_separator + self.convert_condition_group(arg, state)\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_cdb_arbitrary_command_execution.yml",
      "filename": "proc_creation_win_cdb_arbitrary_command_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\cdb.exe or xdm.source.process.executable.filename = CDB.Exe) and (xdm.source.process.command_line = * -c * or xdm.source.process.command_line = * -cf *)",
      "rule_info": {
        "title": "Potential Binary Proxy Execution Via Cdb.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Beyu Denis, oscd.community, Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.005661487579345703
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_certmgr_certificate_installation.yml",
      "filename": "proc_creation_win_certmgr_certificate_installation.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\CertMgr.exe or xdm.source.process.executable.filename = CERTMGT.EXE) and xdm.source.process.command_line = */add* and xdm.source.process.command_line = *root*",
      "rule_info": {
        "title": "New Root Certificate Installed Via CertMgr.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "oscd.community, @redcanary, Zach Stanford @svch0st"
      },
      "execution_time": 0.005906581878662109
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_certoc_download.yml",
      "filename": "proc_creation_win_certoc_download.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\certoc.exe or xdm.source.process.executable.filename = CertOC.exe) and xdm.source.process.command_line = *-GetCACAPS* and xdm.source.process.command_line = *http*",
      "rule_info": {
        "title": "File Download via CertOC.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.006308555603027344
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_certoc_download_direct_ip.yml",
      "filename": "proc_creation_win_certoc_download_direct_ip.yml",
      "status": "failed",
      "error": "'NoneType' object has no attribute 'join' (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "File Download From IP Based URL Via CertOC.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.00647282600402832,
      "error_type": "AttributeError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 446, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_re(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1534, in convert_condition_field_eq_val_re\n    regex=self.convert_value_re(cond.value, state),\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1506, in convert_value_re\n    return r.escape(\n           ^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 736, in escape\n    return prefix + escape_char.join([self.regexp[i:j] for i, j in ranges])\n                    ^^^^^^^^^^^^^^^^\nAttributeError: 'NoneType' object has no attribute 'join' (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_certoc_load_dll.yml",
      "filename": "proc_creation_win_certoc_load_dll.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\certoc.exe or xdm.source.process.executable.filename = CertOC.exe) and (xdm.source.process.command_line = * -LoadDLL * or xdm.source.process.command_line = * /LoadDLL * or xdm.source.process.command_line = * \u2013LoadDLL * or xdm.source.process.command_line = * \u2014LoadDLL * or xdm.source.process.command_line = * \u2015LoadDLL *)",
      "rule_info": {
        "title": "DLL Loaded via CertOC.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Austin Songer @austinsonger"
      },
      "execution_time": 0.006079673767089844
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_certoc_load_dll_susp_locations.yml",
      "filename": "proc_creation_win_certoc_load_dll_susp_locations.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Suspicious DLL Loaded via CertOC.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.010221242904663086,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_certutil_certificate_installation.yml",
      "filename": "proc_creation_win_certutil_certificate_installation.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\certutil.exe or xdm.source.process.executable.filename = CertUtil.exe) and (xdm.source.process.command_line = *-addstore* or xdm.source.process.command_line = */addstore* or xdm.source.process.command_line = *\u2013addstore* or xdm.source.process.command_line = *\u2014addstore* or xdm.source.process.command_line = *\u2015addstore*) and xdm.source.process.command_line = *root*",
      "rule_info": {
        "title": "New Root Certificate Installed Via Certutil.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "oscd.community, @redcanary, Zach Stanford @svch0st"
      },
      "execution_time": 0.006845712661743164
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_certutil_decode.yml",
      "filename": "proc_creation_win_certutil_decode.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\certutil.exe or xdm.source.process.executable.filename = CertUtil.exe) and (xdm.source.process.command_line = *-decode * or xdm.source.process.command_line = */decode * or xdm.source.process.command_line = *\u2013decode * or xdm.source.process.command_line = *\u2014decode * or xdm.source.process.command_line = *\u2015decode * or xdm.source.process.command_line = *-decodehex * or xdm.source.process.command_line = */decodehex * or xdm.source.process.command_line = *\u2013decodehex * or xdm.source.process.command_line = *\u2014decodehex * or xdm.source.process.command_line = *\u2015decodehex *)",
      "rule_info": {
        "title": "File Decoded From Base64/Hex Via Certutil.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community"
      },
      "execution_time": 0.006033420562744141
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_certutil_download.yml",
      "filename": "proc_creation_win_certutil_download.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\certutil.exe or xdm.source.process.executable.filename = CertUtil.exe) and (xdm.source.process.command_line = *urlcache * or xdm.source.process.command_line = *verifyctl *) and xdm.source.process.command_line = *http*",
      "rule_info": {
        "title": "Suspicious Download Via Certutil.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.005847454071044922
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_certutil_download_direct_ip.yml",
      "filename": "proc_creation_win_certutil_download_direct_ip.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\certutil.exe or xdm.source.process.executable.filename = CertUtil.exe) and (xdm.source.process.command_line = *urlcache * or xdm.source.process.command_line = *verifyctl *) and (xdm.source.process.command_line = *://1* or xdm.source.process.command_line = *://2* or xdm.source.process.command_line = *://3* or xdm.source.process.command_line = *://4* or xdm.source.process.command_line = *://5* or xdm.source.process.command_line = *://6* or xdm.source.process.command_line = *://7* or xdm.source.process.command_line = *://8* or xdm.source.process.command_line = *://9*) and not xdm.source.process.command_line = *://7-*",
      "rule_info": {
        "title": "Suspicious File Downloaded From Direct IP Via Certutil.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.008889198303222656
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_certutil_download_file_sharing_domains.yml",
      "filename": "proc_creation_win_certutil_download_file_sharing_domains.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\certutil.exe or xdm.source.process.executable.filename = CertUtil.exe) and (xdm.source.process.command_line = *urlcache * or xdm.source.process.command_line = *verifyctl *) and (xdm.source.process.command_line = *.githubusercontent.com* or xdm.source.process.command_line = *anonfiles.com* or xdm.source.process.command_line = *cdn.discordapp.com* or xdm.source.process.command_line = *ddns.net* or xdm.source.process.command_line = *dl.dropboxusercontent.com* or xdm.source.process.command_line = *ghostbin.co* or xdm.source.process.command_line = *glitch.me* or xdm.source.process.command_line = *gofile.io* or xdm.source.process.command_line = *hastebin.com* or xdm.source.process.command_line = *mediafire.com* or xdm.source.process.command_line = *mega.nz* or xdm.source.process.command_line = *onrender.com* or xdm.source.process.command_line = *pages.dev* or xdm.source.process.command_line = *paste.ee* or xdm.source.process.command_line = *pastebin.com* or xdm.source.process.command_line = *pastebin.pl* or xdm.source.process.command_line = *pastetext.net* or xdm.source.process.command_line = *privatlab.com* or xdm.source.process.command_line = *privatlab.net* or xdm.source.process.command_line = *send.exploit.in* or xdm.source.process.command_line = *sendspace.com* or xdm.source.process.command_line = *storage.googleapis.com* or xdm.source.process.command_line = *storjshare.io* or xdm.source.process.command_line = *supabase.co* or xdm.source.process.command_line = *temp.sh* or xdm.source.process.command_line = *transfer.sh* or xdm.source.process.command_line = *trycloudflare.com* or xdm.source.process.command_line = *ufile.io* or xdm.source.process.command_line = *w3spaces.com* or xdm.source.process.command_line = *workers.dev*)",
      "rule_info": {
        "title": "Suspicious File Downloaded From File-Sharing Website Via Certutil.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.010501623153686523
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_certutil_encode.yml",
      "filename": "proc_creation_win_certutil_encode.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\certutil.exe or xdm.source.process.executable.filename = CertUtil.exe) and (xdm.source.process.command_line = *-encode* or xdm.source.process.command_line = */encode* or xdm.source.process.command_line = *\u2013encode* or xdm.source.process.command_line = *\u2014encode* or xdm.source.process.command_line = *\u2015encode*)",
      "rule_info": {
        "title": "File Encoded To Base64 Via Certutil.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.005896329879760742
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_certutil_encode_susp_extensions.yml",
      "filename": "proc_creation_win_certutil_encode_susp_extensions.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\certutil.exe or xdm.source.process.executable.filename = CertUtil.exe) and (xdm.source.process.command_line = *-encode* or xdm.source.process.command_line = */encode* or xdm.source.process.command_line = *\u2013encode* or xdm.source.process.command_line = *\u2014encode* or xdm.source.process.command_line = *\u2015encode*) and (xdm.source.process.command_line = *.acl* or xdm.source.process.command_line = *.bat* or xdm.source.process.command_line = *.doc* or xdm.source.process.command_line = *.gif* or xdm.source.process.command_line = *.jpeg* or xdm.source.process.command_line = *.jpg* or xdm.source.process.command_line = *.mp3* or xdm.source.process.command_line = *.pdf* or xdm.source.process.command_line = *.png* or xdm.source.process.command_line = *.ppt* or xdm.source.process.command_line = *.tmp* or xdm.source.process.command_line = *.xls* or xdm.source.process.command_line = *.xml*)",
      "rule_info": {
        "title": "Suspicious File Encoded To Base64 Via Certutil.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.011440515518188477
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_certutil_encode_susp_location.yml",
      "filename": "proc_creation_win_certutil_encode_susp_location.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "File In Suspicious Location Encoded To Base64 Via Certutil.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.01200723648071289,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_certutil_export_pfx.yml",
      "filename": "proc_creation_win_certutil_export_pfx.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\certutil.exe or xdm.source.process.executable.filename = CertUtil.exe) and (xdm.source.process.command_line = *-exportPFX * or xdm.source.process.command_line = */exportPFX * or xdm.source.process.command_line = *\u2013exportPFX * or xdm.source.process.command_line = *\u2014exportPFX * or xdm.source.process.command_line = *\u2015exportPFX *)",
      "rule_info": {
        "title": "Certificate Exported Via Certutil.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.008174896240234375
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_certutil_ntlm_coercion.yml",
      "filename": "proc_creation_win_certutil_ntlm_coercion.yml",
      "status": "failed",
      "error": "Operator 'and' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Potential NTLM Coercion Via Certutil.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.007986783981323242,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1227, in convert_condition_and\n    raise NotImplementedError(\"Operator 'and' not supported by the backend\")\nNotImplementedError: Operator 'and' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_chcp_codepage_lookup.yml",
      "filename": "proc_creation_win_chcp_codepage_lookup.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdr_data.causality_actor_process_image_path = *\\cmd.exe and (xdr_data.causality_actor_process_command_line = * -c * or xdr_data.causality_actor_process_command_line = * /c * or xdr_data.causality_actor_process_command_line = * \u2013c * or xdr_data.causality_actor_process_command_line = * \u2014c * or xdr_data.causality_actor_process_command_line = * \u2015c * or xdr_data.causality_actor_process_command_line = * -r * or xdr_data.causality_actor_process_command_line = * /r * or xdr_data.causality_actor_process_command_line = * \u2013r * or xdr_data.causality_actor_process_command_line = * \u2014r * or xdr_data.causality_actor_process_command_line = * \u2015r * or xdr_data.causality_actor_process_command_line = * -k * or xdr_data.causality_actor_process_command_line = * /k * or xdr_data.causality_actor_process_command_line = * \u2013k * or xdr_data.causality_actor_process_command_line = * \u2014k * or xdr_data.causality_actor_process_command_line = * \u2015k *) and xdm.source.process.name = *\\chcp.com and (xdm.source.process.command_line = *chcp or xdm.source.process.command_line = *chcp  or xdm.source.process.command_line = *chcp  )",
      "rule_info": {
        "title": "Console CodePage Lookup Via CHCP",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "_pete_0, TheDFIRReport"
      },
      "execution_time": 0.008364439010620117
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_chcp_codepage_switch.yml",
      "filename": "proc_creation_win_chcp_codepage_switch.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\chcp.com and (xdm.source.process.command_line = * 936 or xdm.source.process.command_line = * 1258)",
      "rule_info": {
        "title": "Suspicious CodePage Switch Via CHCP",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community"
      },
      "execution_time": 0.005977153778076172
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_cipher_overwrite_deleted_data.yml",
      "filename": "proc_creation_win_cipher_overwrite_deleted_data.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.executable.filename = CIPHER.EXE or xdm.source.process.name = *\\cipher.exe) and xdm.source.process.command_line = * /w:*",
      "rule_info": {
        "title": "Deleted Data Overwritten Via Cipher.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "frack113"
      },
      "execution_time": 0.00634455680847168
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_citrix_trolleyexpress_procdump.yml",
      "filename": "proc_creation_win_citrix_trolleyexpress_procdump.yml",
      "status": "failed",
      "error": "'NoneType' object has no attribute 'format' (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Process Access via TrolleyExpress Exclusion",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.03106546401977539,
      "error_type": "AttributeError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 544, in convert_condition\n    return self.convert_condition_not(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1237, in convert_condition_not\n    self.not_token + self.token_separator + self.convert_condition_group(arg, state)\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 454, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_null(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1618, in convert_condition_field_eq_val_null\n    return self.field_null_expression.format(field=self.escape_and_quote_field(cond.field))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: 'NoneType' object has no attribute 'format' (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_clip_execution.yml",
      "filename": "proc_creation_win_clip_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\clip.exe or xdm.source.process.executable.filename = clip.exe",
      "rule_info": {
        "title": "Data Copied To Clipboard Via Clip.EXE",
        "level": "low",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "frack113"
      },
      "execution_time": 0.007865190505981445
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_cloudflared_portable_execution.yml",
      "filename": "proc_creation_win_cloudflared_portable_execution.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Cloudflared Portable Execution",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.010418891906738281,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 544, in convert_condition\n    return self.convert_condition_not(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1237, in convert_condition_not\n    self.not_token + self.token_separator + self.convert_condition_group(arg, state)\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_cmd_del_execution.yml",
      "filename": "proc_creation_win_cmd_del_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\cmd.exe or xdm.source.process.executable.filename = Cmd.Exe) and (xdm.source.process.command_line = *del * or xdm.source.process.command_line = *erase *) and (xdm.source.process.command_line = * -f* or xdm.source.process.command_line = * /f* or xdm.source.process.command_line = * \u2013f* or xdm.source.process.command_line = * \u2014f* or xdm.source.process.command_line = * \u2015f* or xdm.source.process.command_line = * -s* or xdm.source.process.command_line = * /s* or xdm.source.process.command_line = * \u2013s* or xdm.source.process.command_line = * \u2014s* or xdm.source.process.command_line = * \u2015s* or xdm.source.process.command_line = * -q* or xdm.source.process.command_line = * /q* or xdm.source.process.command_line = * \u2013q* or xdm.source.process.command_line = * \u2014q* or xdm.source.process.command_line = * \u2015q*)",
      "rule_info": {
        "title": "File Deletion Via Del",
        "level": "low",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "frack113"
      },
      "execution_time": 0.00973057746887207
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_cmd_path_traversal.yml",
      "filename": "proc_creation_win_cmd_path_traversal.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdr_data.causality_actor_process_image_path = *\\cmd.exe or xdm.source.process.name = *\\cmd.exe or xdm.source.process.executable.filename = cmd.exe) and (xdr_data.causality_actor_process_command_line = */c* or xdr_data.causality_actor_process_command_line = */k* or xdr_data.causality_actor_process_command_line = */r* or xdm.source.process.command_line = */c* or xdm.source.process.command_line = */k* or xdm.source.process.command_line = */r*) and (xdr_data.causality_actor_process_command_line = /../../ or xdm.source.process.command_line = */../../*) and not xdm.source.process.command_line = *\\Tasktop\\keycloak\\bin\\/../../jre\\bin\\java*",
      "rule_info": {
        "title": "Potential CommandLine Path Traversal Via Cmd.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "xknow @xknow_infosec, Tim Shelton"
      },
      "execution_time": 0.007610797882080078
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_cmd_rmdir_execution.yml",
      "filename": "proc_creation_win_cmd_rmdir_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\cmd.exe or xdm.source.process.executable.filename = Cmd.Exe) and xdm.source.process.command_line = *rmdir* and (xdm.source.process.command_line = */s* or xdm.source.process.command_line = */q*)",
      "rule_info": {
        "title": "Directory Removal Via Rmdir",
        "level": "low",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "frack113"
      },
      "execution_time": 0.007777690887451172
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_cmd_unusual_parent.yml",
      "filename": "proc_creation_win_cmd_unusual_parent.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\cmd.exe and (xdr_data.causality_actor_process_image_path = *\\csrss.exe or xdr_data.causality_actor_process_image_path = *\\ctfmon.exe or xdr_data.causality_actor_process_image_path = *\\dllhost.exe or xdr_data.causality_actor_process_image_path = *\\epad.exe or xdr_data.causality_actor_process_image_path = *\\FlashPlayerUpdateService.exe or xdr_data.causality_actor_process_image_path = *\\GoogleUpdate.exe or xdr_data.causality_actor_process_image_path = *\\jucheck.exe or xdr_data.causality_actor_process_image_path = *\\jusched.exe or xdr_data.causality_actor_process_image_path = *\\LogonUI.exe or xdr_data.causality_actor_process_image_path = *\\lsass.exe or xdr_data.causality_actor_process_image_path = *\\regsvr32.exe or xdr_data.causality_actor_process_image_path = *\\SearchIndexer.exe or xdr_data.causality_actor_process_image_path = *\\SearchProtocolHost.exe or xdr_data.causality_actor_process_image_path = *\\SIHClient.exe or xdr_data.causality_actor_process_image_path = *\\sihost.exe or xdr_data.causality_actor_process_image_path = *\\slui.exe or xdr_data.causality_actor_process_image_path = *\\spoolsv.exe or xdr_data.causality_actor_process_image_path = *\\sppsvc.exe or xdr_data.causality_actor_process_image_path = *\\taskhostw.exe or xdr_data.causality_actor_process_image_path = *\\unsecapp.exe or xdr_data.causality_actor_process_image_path = *\\WerFault.exe or xdr_data.causality_actor_process_image_path = *\\wermgr.exe or xdr_data.causality_actor_process_image_path = *\\wlanext.exe or xdr_data.causality_actor_process_image_path = *\\WUDFHost.exe)",
      "rule_info": {
        "title": "Unusual Parent Process For Cmd.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Tim Rauch, Elastic (idea)"
      },
      "execution_time": 0.0075283050537109375
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_cmdkey_recon.yml",
      "filename": "proc_creation_win_cmdkey_recon.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\cmdkey.exe or xdm.source.process.executable.filename = cmdkey.exe) and (xdm.source.process.command_line = * -l* or xdm.source.process.command_line = * /l* or xdm.source.process.command_line = * \u2013l* or xdm.source.process.command_line = * \u2014l* or xdm.source.process.command_line = * \u2015l*)",
      "rule_info": {
        "title": "Potential Reconnaissance For Cached Credentials Via Cmdkey.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "jmallette, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.008774995803833008
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_cmdl32_arbitrary_file_download.yml",
      "filename": "proc_creation_win_cmdl32_arbitrary_file_download.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\cmdl32.exe or xdm.source.process.executable.filename = CMDL32.EXE) and xdm.source.process.command_line = */vpn* and xdm.source.process.command_line = */lan*",
      "rule_info": {
        "title": "Potential Arbitrary File Download Via Cmdl32.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "frack113"
      },
      "execution_time": 0.0058612823486328125
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_configsecuritypolicy_download_file.yml",
      "filename": "proc_creation_win_configsecuritypolicy_download_file.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.command_line = *ConfigSecurityPolicy.exe* or xdm.source.process.name = *\\ConfigSecurityPolicy.exe or xdm.source.process.executable.filename = ConfigSecurityPolicy.exe) and (xdm.source.process.command_line = *ftp://* or xdm.source.process.command_line = *http://* or xdm.source.process.command_line = *https://*)",
      "rule_info": {
        "title": "Arbitrary File Download Via ConfigSecurityPolicy.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "frack113"
      },
      "execution_time": 0.007944822311401367
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_csvde_export.yml",
      "filename": "proc_creation_win_csvde_export.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\csvde.exe or xdm.source.process.executable.filename = csvde.exe) and xdm.source.process.command_line = * -f* and not xdm.source.process.command_line = * -i*",
      "rule_info": {
        "title": "Active Directory Structure Export Via Csvde.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.006743669509887695
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_curl_download_direct_ip_susp_extensions.yml",
      "filename": "proc_creation_win_curl_download_direct_ip_susp_extensions.yml",
      "status": "failed",
      "error": "'NoneType' object has no attribute 'join' (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Suspicious File Download From IP Via Curl.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.010423898696899414,
      "error_type": "AttributeError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 446, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_re(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1534, in convert_condition_field_eq_val_re\n    regex=self.convert_value_re(cond.value, state),\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1506, in convert_value_re\n    return r.escape(\n           ^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 736, in escape\n    return prefix + escape_char.join([self.regexp[i:j] for i, j in ranges])\n                    ^^^^^^^^^^^^^^^^\nAttributeError: 'NoneType' object has no attribute 'join' (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_curl_susp_download.yml",
      "filename": "proc_creation_win_curl_susp_download.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Suspicious Curl.EXE Download",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.012641191482543945,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_diskshadow_script_mode_susp_ext.yml",
      "filename": "proc_creation_win_diskshadow_script_mode_susp_ext.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.executable.filename = diskshadow.exe or xdm.source.process.name = *\\diskshadow.exe) and (xdm.source.process.command_line = *-s * or xdm.source.process.command_line = */s * or xdm.source.process.command_line = *\u2013s * or xdm.source.process.command_line = *\u2014s * or xdm.source.process.command_line = *\u2015s *) and not xdm.source.process.command_line = *.txt*",
      "rule_info": {
        "title": "Diskshadow Script Mode - Uncommon Script Extension Execution",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.012971878051757812
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_dnscmd_install_new_server_level_plugin_dll.yml",
      "filename": "proc_creation_win_dnscmd_install_new_server_level_plugin_dll.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\dnscmd.exe and xdm.source.process.command_line = */config* and xdm.source.process.command_line = */serverlevelplugindll*",
      "rule_info": {
        "title": "New DNS ServerLevelPluginDll Installed Via Dnscmd.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.008366823196411133
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_dnx_execute_csharp_code.yml",
      "filename": "proc_creation_win_dnx_execute_csharp_code.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\dnx.exe",
      "rule_info": {
        "title": "Potential Application Whitelisting Bypass via Dnx.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Beyu Denis, oscd.community"
      },
      "execution_time": 0.0047681331634521484
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_dotnetdump_memory_dump.yml",
      "filename": "proc_creation_win_dotnetdump_memory_dump.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\dotnet-dump.exe or xdm.source.process.executable.filename = dotnet-dump.dll) and xdm.source.process.command_line = *collect*",
      "rule_info": {
        "title": "Process Memory Dump Via Dotnet-Dump",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.004950523376464844
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_driverquery_recon.yml",
      "filename": "proc_creation_win_driverquery_recon.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Potential Recon Activity Using DriverQuery.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.010248661041259766,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_dump64_defender_av_bypass_rename.yml",
      "filename": "proc_creation_win_dump64_defender_av_bypass_rename.yml",
      "status": "failed",
      "error": "Operator 'and' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Potential Windows Defender AV Bypass Via Dump64.EXE Rename",
        "level": "high",
        "logsource": {
          "product": "windows",
          "category": "process_creation"
        },
        "author": "Austin Songer @austinsonger, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.0071201324462890625,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1227, in convert_condition_and\n    raise NotImplementedError(\"Operator 'and' not supported by the backend\")\nNotImplementedError: Operator 'and' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_esentutl_sensitive_file_copy.yml",
      "filename": "proc_creation_win_esentutl_sensitive_file_copy.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\esentutl.exe or xdm.source.process.executable.filename = \\esentutl.exe) and (xdm.source.process.command_line = *vss* or xdm.source.process.command_line = * -m * or xdm.source.process.command_line = * /m * or xdm.source.process.command_line = * \u2013m * or xdm.source.process.command_line = * \u2014m * or xdm.source.process.command_line = * \u2015m * or xdm.source.process.command_line = * -y * or xdm.source.process.command_line = * /y * or xdm.source.process.command_line = * \u2013y * or xdm.source.process.command_line = * \u2014y * or xdm.source.process.command_line = * \u2015y *) or xdm.source.process.command_line = *\\config\\RegBack\\sam* or xdm.source.process.command_line = *\\config\\RegBack\\security* or xdm.source.process.command_line = *\\config\\RegBack\\system* or xdm.source.process.command_line = *\\config\\sam* or xdm.source.process.command_line = *\\config\\security* or xdm.source.process.command_line = *\\config\\system * or xdm.source.process.command_line = *\\repair\\sam* or xdm.source.process.command_line = *\\repair\\security* or xdm.source.process.command_line = *\\repair\\system* or xdm.source.process.command_line = *\\windows\\ntds\\ntds.dit*",
      "rule_info": {
        "title": "Copying Sensitive Files with Credential Data",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Teymur Kheirkhabarov, Daniil Yugoslavskiy, oscd.community"
      },
      "execution_time": 0.012594223022460938
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_expand_cabinet_files.yml",
      "filename": "proc_creation_win_expand_cabinet_files.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Potentially Suspicious Cabinet File Expansion",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Bhabesh Raj, X__Junior (Nextron Systems)"
      },
      "execution_time": 0.014524698257446289,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_findstr_lnk.yml",
      "filename": "proc_creation_win_findstr_lnk.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\find.exe or xdm.source.process.name = *\\findstr.exe or xdm.source.process.executable.filename = FIND.EXE or xdm.source.process.executable.filename = FINDSTR.EXE) and (xdm.source.process.command_line = *.lnk or xdm.source.process.command_line = *.lnk\" or xdm.source.process.command_line = *.lnk')",
      "rule_info": {
        "title": "Findstr Launching .lnk File",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Trent Liffick"
      },
      "execution_time": 0.0053331851959228516
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_findstr_security_keyword_lookup.yml",
      "filename": "proc_creation_win_findstr_security_keyword_lookup.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\find.exe or xdm.source.process.name = *\\findstr.exe or xdm.source.process.executable.filename = FIND.EXE or xdm.source.process.executable.filename = FINDSTR.EXE) and (xdm.source.process.command_line = * avira or xdm.source.process.command_line = * avira\" or xdm.source.process.command_line = * cb or xdm.source.process.command_line = * cb\" or xdm.source.process.command_line = * cylance or xdm.source.process.command_line = * cylance\" or xdm.source.process.command_line = * defender or xdm.source.process.command_line = * defender\" or xdm.source.process.command_line = * kaspersky or xdm.source.process.command_line = * kaspersky\" or xdm.source.process.command_line = * kes or xdm.source.process.command_line = * kes\" or xdm.source.process.command_line = * mc or xdm.source.process.command_line = * mc\" or xdm.source.process.command_line = * sec or xdm.source.process.command_line = * sec\" or xdm.source.process.command_line = * sentinel or xdm.source.process.command_line = * sentinel\" or xdm.source.process.command_line = * symantec or xdm.source.process.command_line = * symantec\" or xdm.source.process.command_line = * virus or xdm.source.process.command_line = * virus\")",
      "rule_info": {
        "title": "Security Tools Keyword Lookup Via Findstr.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems), frack113"
      },
      "execution_time": 0.013677358627319336
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_findstr_subfolder_search.yml",
      "filename": "proc_creation_win_findstr_subfolder_search.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.command_line = *findstr* or xdm.source.process.name = *findstr.exe or xdm.source.process.executable.filename = FINDSTR.EXE) and (xdm.source.process.command_line = * -s * or xdm.source.process.command_line = * /s * or xdm.source.process.command_line = * \u2013s * or xdm.source.process.command_line = * \u2014s * or xdm.source.process.command_line = * \u2015s *) and (xdm.source.process.command_line = * -i * or xdm.source.process.command_line = * /i * or xdm.source.process.command_line = * \u2013i * or xdm.source.process.command_line = * \u2014i * or xdm.source.process.command_line = * \u2015i *)",
      "rule_info": {
        "title": "Insensitive Subfolder Search Via Findstr.EXE",
        "level": "low",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative, Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.00718998908996582
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_forfiles_child_process_masquerading.yml",
      "filename": "proc_creation_win_forfiles_child_process_masquerading.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Forfiles.EXE Child Process Masquerading",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems), Anish Bogati"
      },
      "execution_time": 0.008189678192138672,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 544, in convert_condition\n    return self.convert_condition_not(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1237, in convert_condition_not\n    self.not_token + self.token_separator + self.convert_condition_group(arg, state)\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_forfiles_proxy_execution_.yml",
      "filename": "proc_creation_win_forfiles_proxy_execution_.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\forfiles.exe or xdm.source.process.executable.filename = forfiles.exe) and (xdm.source.process.command_line = * -c * or xdm.source.process.command_line = * /c * or xdm.source.process.command_line = * \u2013c * or xdm.source.process.command_line = * \u2014c * or xdm.source.process.command_line = * \u2015c *)",
      "rule_info": {
        "title": "Forfiles Command Execution",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Tim Rauch, Elastic, E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community"
      },
      "execution_time": 0.0060651302337646484
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_fsutil_symlinkevaluation.yml",
      "filename": "proc_creation_win_fsutil_symlinkevaluation.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\fsutil.exe or xdm.source.process.executable.filename = fsutil.exe) and xdm.source.process.command_line = *behavior * and xdm.source.process.command_line = *set * and xdm.source.process.command_line = *SymlinkEvaluation*",
      "rule_info": {
        "title": "Fsutil Behavior Set SymlinkEvaluation",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "frack113"
      },
      "execution_time": 0.0057086944580078125
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_gpg4win_decryption.yml",
      "filename": "proc_creation_win_gpg4win_decryption.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\gpg.exe or xdm.source.process.name = *\\gpg2.exe or xdm.event.description = GnuPG\u2019s OpenPGP tool) and xdm.source.process.command_line = * -d * and xdm.source.process.command_line = *passphrase*",
      "rule_info": {
        "title": "File Decryption Using Gpg4win",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.004929542541503906
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_hh_chm_execution.yml",
      "filename": "proc_creation_win_hh_chm_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.executable.filename = HH.exe or xdm.source.process.name = *\\hh.exe) and xdm.source.process.command_line = *.chm*",
      "rule_info": {
        "title": "HH.EXE Execution",
        "level": "low",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "E.M. Anhaus (originally from Atomic Blue Detections, Dan Beavin), oscd.community"
      },
      "execution_time": 0.005413055419921875
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_hh_chm_remote_download_or_execution.yml",
      "filename": "proc_creation_win_hh_chm_remote_download_or_execution.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Remote CHM File Download/Execution Via HH.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.006064653396606445,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_hh_html_help_susp_child_process.yml",
      "filename": "proc_creation_win_hh_html_help_susp_child_process.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdr_data.causality_actor_process_image_path = *\\hh.exe and (xdm.source.process.name = *\\CertReq.exe or xdm.source.process.name = *\\CertUtil.exe or xdm.source.process.name = *\\cmd.exe or xdm.source.process.name = *\\cscript.exe or xdm.source.process.name = *\\installutil.exe or xdm.source.process.name = *\\MSbuild.exe or xdm.source.process.name = *\\MSHTA.EXE or xdm.source.process.name = *\\msiexec.exe or xdm.source.process.name = *\\powershell.exe or xdm.source.process.name = *\\pwsh.exe or xdm.source.process.name = *\\regsvr32.exe or xdm.source.process.name = *\\rundll32.exe or xdm.source.process.name = *\\schtasks.exe or xdm.source.process.name = *\\wmic.exe or xdm.source.process.name = *\\wscript.exe)",
      "rule_info": {
        "title": "HTML Help HH.EXE Suspicious Child Process",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Maxim Pavlunin, Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.0065653324127197266
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_hktl_dumpert.yml",
      "filename": "proc_creation_win_hktl_dumpert.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter Hashes = *MD5=09D278F9DE118EF09163C6140255C690* or xdm.source.process.command_line = *Dumpert.dll*",
      "rule_info": {
        "title": "HackTool - Dumpert Process Dumper Execution",
        "level": "critical",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.004383087158203125
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_hktl_gmer.yml",
      "filename": "proc_creation_win_hktl_gmer.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\gmer.exe or Hashes = *MD5=E9DC058440D321AA17D0600B3CA0AB04* or Hashes = *SHA1=539C228B6B332F5AA523E5CE358C16647D8BBE57* or Hashes = *SHA256=E8A3E804A96C716A3E9B69195DB6FFB0D33E2433AF871E4D4E1EAB3097237173*",
      "rule_info": {
        "title": "HackTool - GMER Rootkit Detector and Remover Execution",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.004370450973510742
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_hktl_inveigh.yml",
      "filename": "proc_creation_win_hktl_inveigh.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\Inveigh.exe or xdm.source.process.executable.filename = \\Inveigh.exe or xdm.source.process.executable.filename = \\Inveigh.dll or xdm.event.description = Inveigh or xdm.source.process.command_line = * -SpooferIP* or xdm.source.process.command_line = * -ReplyToIPs * or xdm.source.process.command_line = * -ReplyToDomains * or xdm.source.process.command_line = * -ReplyToMACs * or xdm.source.process.command_line = * -SnifferIP*",
      "rule_info": {
        "title": "HackTool - Inveigh Execution",
        "level": "critical",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.0053446292877197266
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_hktl_invoke_obfuscation_clip.yml",
      "filename": "proc_creation_win_hktl_invoke_obfuscation_clip.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.command_line = *cmd* and xdm.source.process.command_line = *&&* and xdm.source.process.command_line = *clipboard]::* and xdm.source.process.command_line = *-f* and (xdm.source.process.command_line = */c* or xdm.source.process.command_line = */r*)",
      "rule_info": {
        "title": "Invoke-Obfuscation CLIP+ Launcher",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Jonathan Cheong, oscd.community"
      },
      "execution_time": 0.0056765079498291016
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_hktl_invoke_obfuscation_stdin.yml",
      "filename": "proc_creation_win_hktl_invoke_obfuscation_stdin.yml",
      "status": "failed",
      "error": "'NoneType' object has no attribute 'join' (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Invoke-Obfuscation STDIN+ Launcher",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Jonathan Cheong, oscd.community"
      },
      "execution_time": 0.005297183990478516,
      "error_type": "AttributeError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 446, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_re(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1534, in convert_condition_field_eq_val_re\n    regex=self.convert_value_re(cond.value, state),\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1506, in convert_value_re\n    return r.escape(\n           ^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 736, in escape\n    return prefix + escape_char.join([self.regexp[i:j] for i, j in ranges])\n                    ^^^^^^^^^^^^^^^^\nAttributeError: 'NoneType' object has no attribute 'join' (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_hktl_rubeus.yml",
      "filename": "proc_creation_win_hktl_rubeus.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\Rubeus.exe or xdm.source.process.executable.filename = Rubeus.exe or xdm.event.description = Rubeus or xdm.source.process.command_line = *asreproast * or xdm.source.process.command_line = *dump /service:krbtgt * or xdm.source.process.command_line = *dump /luid:0x* or xdm.source.process.command_line = *kerberoast * or xdm.source.process.command_line = *createnetonly /program:* or xdm.source.process.command_line = *ptt /ticket:* or xdm.source.process.command_line = */impersonateuser:* or xdm.source.process.command_line = *renew /ticket:* or xdm.source.process.command_line = *asktgt /user:* or xdm.source.process.command_line = *harvest /interval:* or xdm.source.process.command_line = *s4u /user:* or xdm.source.process.command_line = *s4u /ticket:* or xdm.source.process.command_line = *hash /password:* or xdm.source.process.command_line = *golden /aes256:* or xdm.source.process.command_line = *silver /user:*",
      "rule_info": {
        "title": "HackTool - Rubeus Execution",
        "level": "critical",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.007019996643066406
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_hktl_selectmyparent.yml",
      "filename": "proc_creation_win_hktl_selectmyparent.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\SelectMyParent.exe or xdm.source.process.command_line = *PPID-spoof* or xdm.source.process.command_line = *ppid_spoof* or xdm.source.process.command_line = *spoof-ppid* or xdm.source.process.command_line = *spoof_ppid* or xdm.source.process.command_line = *ppidspoof* or xdm.source.process.command_line = *spoofppid* or xdm.source.process.command_line = *spoofedppid* or xdm.source.process.command_line = * -spawnto * or xdm.source.process.executable.filename = *PPID-spoof* or xdm.source.process.executable.filename = *ppid_spoof* or xdm.source.process.executable.filename = *spoof-ppid* or xdm.source.process.executable.filename = *spoof_ppid* or xdm.source.process.executable.filename = *ppidspoof* or xdm.source.process.executable.filename = *spoofppid* or xdm.source.process.executable.filename = *spoofedppid* or xdm.event.description = SelectMyParent or Hashes = *IMPHASH=04D974875BD225F00902B4CAD9AF3FBC* or Hashes = *IMPHASH=A782AF154C9E743DDF3F3EB2B8F3D16E* or Hashes = *IMPHASH=89059503D7FBF470E68F7E63313DA3AD* or Hashes = *IMPHASH=CA28337632625C8281AB8A130B3D6BAD*",
      "rule_info": {
        "title": "HackTool - PPID Spoofing SelectMyParent Tool Execution",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.007523775100708008
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_hktl_sharpldapwhoami.yml",
      "filename": "proc_creation_win_hktl_sharpldapwhoami.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\SharpLdapWhoami.exe or xdm.source.process.executable.filename = *SharpLdapWhoami* or xdr_data.actor_process_signature_product = SharpLdapWhoami or xdm.source.process.command_line = * /method:ntlm or xdm.source.process.command_line = * /method:kerb or xdm.source.process.command_line = * /method:nego or xdm.source.process.command_line = * /m:nego or xdm.source.process.command_line = * /m:ntlm or xdm.source.process.command_line = * /m:kerb",
      "rule_info": {
        "title": "HackTool - SharpLdapWhoami Execution",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.0059375762939453125
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_hktl_sharpsuccessor_execution.yml",
      "filename": "proc_creation_win_hktl_sharpsuccessor_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\SharpSuccessor.exe or xdm.source.process.executable.filename = SharpSuccessor.exe or xdm.source.process.command_line = *SharpSuccessor* or xdm.source.process.command_line = * add * and xdm.source.process.command_line = * /impersonate* and xdm.source.process.command_line = * /path* and xdm.source.process.command_line = * /account* and xdm.source.process.command_line = * /name*",
      "rule_info": {
        "title": "HKTL - SharpSuccessor Privilege Escalation Tool Execution",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Swachchhanda Shrawan Poudel (Nextron Systems)"
      },
      "execution_time": 0.005205869674682617
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_hktl_soaphound_execution.yml",
      "filename": "proc_creation_win_hktl_soaphound_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.command_line = * --buildcache * or xdm.source.process.command_line = * --bhdump * or xdm.source.process.command_line = * --certdump * or xdm.source.process.command_line = * --dnsdump *) and (xdm.source.process.command_line = * -c * or xdm.source.process.command_line = * --cachefilename * or xdm.source.process.command_line = * -o * or xdm.source.process.command_line = * --outputdirectory*)",
      "rule_info": {
        "title": "HackTool - SOAPHound Execution",
        "level": "high",
        "logsource": {
          "product": "windows",
          "category": "process_creation"
        },
        "author": "@kostastsale"
      },
      "execution_time": 0.005638837814331055
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_hktl_sysmoneop.yml",
      "filename": "proc_creation_win_hktl_sysmoneop.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\SysmonEOP.exe or Hashes = *IMPHASH=22F4089EB8ABA31E1BB162C6D9BF72E5* or Hashes = *IMPHASH=5123FA4C4384D431CD0D893EEB49BBEC*",
      "rule_info": {
        "title": "HackTool - SysmonEOP Execution",
        "level": "critical",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.0049054622650146484
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_hktl_wmiexec_default_powershell.yml",
      "filename": "proc_creation_win_hktl_wmiexec_default_powershell.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.command_line = *-NoP -NoL -sta -NonI -W Hidden -Exec Bypass -Enc*",
      "rule_info": {
        "title": "HackTool - Wmiexec Default Powershell Command",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.004503488540649414
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_hwp_exploits.yml",
      "filename": "proc_creation_win_hwp_exploits.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdr_data.causality_actor_process_image_path = *\\Hwp.exe and xdm.source.process.name = *\\gbb.exe",
      "rule_info": {
        "title": "Suspicious HWP Sub Processes",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.005217790603637695
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_java_keytool_susp_child_process.yml",
      "filename": "proc_creation_win_java_keytool_susp_child_process.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdr_data.causality_actor_process_image_path = *\\keytool.exe and (xdm.source.process.name = *\\cmd.exe or xdm.source.process.name = *\\sh.exe or xdm.source.process.name = *\\bash.exe or xdm.source.process.name = *\\powershell.exe or xdm.source.process.name = *\\pwsh.exe or xdm.source.process.name = *\\schtasks.exe or xdm.source.process.name = *\\certutil.exe or xdm.source.process.name = *\\whoami.exe or xdm.source.process.name = *\\bitsadmin.exe or xdm.source.process.name = *\\wscript.exe or xdm.source.process.name = *\\cscript.exe or xdm.source.process.name = *\\scrcons.exe or xdm.source.process.name = *\\regsvr32.exe or xdm.source.process.name = *\\hh.exe or xdm.source.process.name = *\\wmic.exe or xdm.source.process.name = *\\mshta.exe or xdm.source.process.name = *\\rundll32.exe or xdm.source.process.name = *\\forfiles.exe or xdm.source.process.name = *\\scriptrunner.exe or xdm.source.process.name = *\\mftrace.exe or xdm.source.process.name = *\\AppVLP.exe or xdm.source.process.name = *\\systeminfo.exe or xdm.source.process.name = *\\reg.exe or xdm.source.process.name = *\\query.exe)",
      "rule_info": {
        "title": "Suspicious Shells Spawn by Java Utility Keytool",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Andreas Hunkeler (@Karneades)"
      },
      "execution_time": 0.00705718994140625
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_java_sysaidserver_susp_child_process.yml",
      "filename": "proc_creation_win_java_sysaidserver_susp_child_process.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdr_data.causality_actor_process_image_path = *\\java.exe or xdr_data.causality_actor_process_image_path = *\\javaw.exe) and xdr_data.causality_actor_process_command_line = *SysAidServer*",
      "rule_info": {
        "title": "Suspicious SysAidServer Child",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.004184246063232422
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_jsc_execution.yml",
      "filename": "proc_creation_win_jsc_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\jsc.exe or xdm.source.process.executable.filename = jsc.exe",
      "rule_info": {
        "title": "JScript Compiler Execution",
        "level": "low",
        "logsource": {
          "product": "windows",
          "category": "process_creation"
        },
        "author": "frack113"
      },
      "execution_time": 0.00443720817565918
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_keyscrambler_susp_child_process.yml",
      "filename": "proc_creation_win_keyscrambler_susp_child_process.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdr_data.causality_actor_process_image_path = *\\KeyScrambler.exe and (xdm.source.process.name = *\\cmd.exe or xdm.source.process.name = *\\cscript.exe or xdm.source.process.name = *\\mshta.exe or xdm.source.process.name = *\\powershell.exe or xdm.source.process.name = *\\pwsh.exe or xdm.source.process.name = *\\regsvr32.exe or xdm.source.process.name = *\\rundll32.exe or xdm.source.process.name = *\\wscript.exe or xdm.source.process.executable.filename = Cmd.Exe or xdm.source.process.executable.filename = cscript.exe or xdm.source.process.executable.filename = mshta.exe or xdm.source.process.executable.filename = PowerShell.EXE or xdm.source.process.executable.filename = pwsh.dll or xdm.source.process.executable.filename = regsvr32.exe or xdm.source.process.executable.filename = RUNDLL32.EXE or xdm.source.process.executable.filename = wscript.exe)",
      "rule_info": {
        "title": "Potentially Suspicious Child Process of KeyScrambler.exe",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Swachchhanda Shrawan Poudel"
      },
      "execution_time": 0.007019758224487305
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_ldifde_export.yml",
      "filename": "proc_creation_win_ldifde_export.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\ldifde.exe or xdm.source.process.executable.filename = ldifde.exe) and xdm.source.process.command_line = *-f* and not xdm.source.process.command_line = * -i*",
      "rule_info": {
        "title": "Active Directory Structure Export Via Ldifde.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.005655765533447266
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_link_uncommon_parent_process.yml",
      "filename": "proc_creation_win_link_uncommon_parent_process.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Uncommon Link.EXE Parent Process",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.007170915603637695,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 66, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 544, in convert_condition\n    return self.convert_condition_not(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1237, in convert_condition_not\n    self.not_token + self.token_separator + self.convert_condition_group(arg, state)\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_lodctr_performance_counter_tampering.yml",
      "filename": "proc_creation_win_lodctr_performance_counter_tampering.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\lodctr.exe and xdm.source.process.executable.filename = LODCTR.EXE and (xdm.source.process.command_line = * -r* or xdm.source.process.command_line = * /r* or xdm.source.process.command_line = * \u2013r* or xdm.source.process.command_line = * \u2014r* or xdm.source.process.command_line = * \u2015r*)",
      "rule_info": {
        "title": "Rebuild Performance Counter Values Via Lodctr.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.004866600036621094
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_logman_disable_eventlog.yml",
      "filename": "proc_creation_win_logman_disable_eventlog.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\logman.exe or xdm.source.process.executable.filename = Logman.exe) and (xdm.source.process.command_line = *stop * or xdm.source.process.command_line = *delete *) and (xdm.source.process.command_line = *Circular Kernel Context Logger* or xdm.source.process.command_line = *EventLog-* or xdm.source.process.command_line = *SYSMON TRACE* or xdm.source.process.command_line = *SysmonDnsEtwSession*)",
      "rule_info": {
        "title": "Suspicious Windows Trace ETW Session Tamper Via Logman.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.00863504409790039
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_lolbin_diantz_ads.yml",
      "filename": "proc_creation_win_lolbin_diantz_ads.yml",
      "status": "failed",
      "error": "'NoneType' object has no attribute 'join' (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Suspicious Diantz Alternate Data Stream Execution",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "frack113"
      },
      "execution_time": 0.010118484497070312,
      "error_type": "AttributeError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 446, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_re(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1534, in convert_condition_field_eq_val_re\n    regex=self.convert_value_re(cond.value, state),\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1506, in convert_value_re\n    return r.escape(\n           ^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 736, in escape\n    return prefix + escape_char.join([self.regexp[i:j] for i, j in ranges])\n                    ^^^^^^^^^^^^^^^^\nAttributeError: 'NoneType' object has no attribute 'join' (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_lolbin_msdt_answer_file.yml",
      "filename": "proc_creation_win_lolbin_msdt_answer_file.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\msdt.exe and xdm.source.process.command_line = *\\WINDOWS\\diagnostics\\index\\PCWDiagnostic.xml* and (xdm.source.process.command_line = * -af * or xdm.source.process.command_line = * /af *) and not xdr_data.causality_actor_process_image_path = *\\pcwrun.exe",
      "rule_info": {
        "title": "Execute MSDT Via Answer File",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.008045673370361328
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_lolbin_runscripthelper.yml",
      "filename": "proc_creation_win_lolbin_runscripthelper.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\Runscripthelper.exe and xdm.source.process.command_line = *surfacecheck*",
      "rule_info": {
        "title": "Suspicious Runscripthelper.exe",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Victor Sergeev, oscd.community"
      },
      "execution_time": 0.006125450134277344
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_lolbin_syncappvpublishingserver_execute_psh.yml",
      "filename": "proc_creation_win_lolbin_syncappvpublishingserver_execute_psh.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\SyncAppvPublishingServer.exe or xdm.source.process.executable.filename = syncappvpublishingserver.exe) and xdm.source.process.command_line = *\"n; *",
      "rule_info": {
        "title": "SyncAppvPublishingServer Execute Arbitrary PowerShell Code",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "frack113"
      },
      "execution_time": 0.006245851516723633
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_msiexec_embedding.yml",
      "filename": "proc_creation_win_msiexec_embedding.yml",
      "status": "failed",
      "error": "Operator 'and' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Suspicious MsiExec Embedding Parent",
        "level": "medium",
        "logsource": {
          "product": "windows",
          "category": "process_creation"
        },
        "author": "frack113"
      },
      "execution_time": 0.008767366409301758,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 544, in convert_condition\n    return self.convert_condition_not(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1237, in convert_condition_not\n    self.not_token + self.token_separator + self.convert_condition_group(arg, state)\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1227, in convert_condition_and\n    raise NotImplementedError(\"Operator 'and' not supported by the backend\")\nNotImplementedError: Operator 'and' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_msiexec_web_install.yml",
      "filename": "proc_creation_win_msiexec_web_install.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.command_line = * msiexec* and xdm.source.process.command_line = *://*",
      "rule_info": {
        "title": "MsiExec Web Install",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.005742788314819336
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_mspub_download.yml",
      "filename": "proc_creation_win_mspub_download.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\MSPUB.exe or xdm.source.process.executable.filename = MSPUB.exe) and (xdm.source.process.command_line = *ftp://* or xdm.source.process.command_line = *http://* or xdm.source.process.command_line = *https://*)",
      "rule_info": {
        "title": "Arbitrary File Download Via MSPUB.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.006278038024902344
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_msra_process_injection.yml",
      "filename": "proc_creation_win_msra_process_injection.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdr_data.causality_actor_process_image_path = *\\msra.exe and xdr_data.causality_actor_process_command_line = *msra.exe and (xdm.source.process.name = *\\arp.exe or xdm.source.process.name = *\\cmd.exe or xdm.source.process.name = *\\net.exe or xdm.source.process.name = *\\netstat.exe or xdm.source.process.name = *\\nslookup.exe or xdm.source.process.name = *\\route.exe or xdm.source.process.name = *\\schtasks.exe or xdm.source.process.name = *\\whoami.exe)",
      "rule_info": {
        "title": "Potential Process Injection Via Msra.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Alexander McDonald"
      },
      "execution_time": 0.007944107055664062
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_mssql_sqlps_susp_execution.yml",
      "filename": "proc_creation_win_mssql_sqlps_susp_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdr_data.causality_actor_process_image_path = *\\sqlps.exe or (xdm.source.process.name = *\\sqlps.exe or xdm.source.process.executable.filename = sqlps.exe) and not xdr_data.causality_actor_process_image_path = *\\sqlagent.exe",
      "rule_info": {
        "title": "Detection of PowerShell Execution via Sqlps.exe",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Agro (@agro_sev) oscd.community"
      },
      "execution_time": 0.01931929588317871
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_mssql_sqltoolsps_susp_execution.yml",
      "filename": "proc_creation_win_mssql_sqltoolsps_susp_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\sqltoolsps.exe or xdr_data.causality_actor_process_image_path = *\\sqltoolsps.exe or xdm.source.process.executable.filename = \\sqltoolsps.exe) and not xdr_data.causality_actor_process_image_path = *\\smss.exe",
      "rule_info": {
        "title": "SQL Client Tools PowerShell Session Detection",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Agro (@agro_sev) oscd.communitly"
      },
      "execution_time": 0.005914449691772461
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_mssql_susp_child_process.yml",
      "filename": "proc_creation_win_mssql_susp_child_process.yml",
      "status": "failed",
      "error": "Operator 'and' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Suspicious Child Process Of SQL Server",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "FPT.EagleEye Team, wagga"
      },
      "execution_time": 0.010287761688232422,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 66, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 544, in convert_condition\n    return self.convert_condition_not(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1237, in convert_condition_not\n    self.not_token + self.token_separator + self.convert_condition_group(arg, state)\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1227, in convert_condition_and\n    raise NotImplementedError(\"Operator 'and' not supported by the backend\")\nNotImplementedError: Operator 'and' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_powershell_cmdline_reversed_strings.yml",
      "filename": "proc_creation_win_powershell_cmdline_reversed_strings.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\powershell.exe or xdm.source.process.name = *\\pwsh.exe or xdm.source.process.executable.filename = PowerShell.EXE or xdm.source.process.executable.filename = pwsh.dll) and (xdm.source.process.command_line = *hctac* or xdm.source.process.command_line = *kaerb* or xdm.source.process.command_line = *dnammoc* or xdm.source.process.command_line = *ekovn* or xdm.source.process.command_line = *eliFd* or xdm.source.process.command_line = *rahc* or xdm.source.process.command_line = *etirw* or xdm.source.process.command_line = *golon* or xdm.source.process.command_line = *tninon* or xdm.source.process.command_line = *eddih* or xdm.source.process.command_line = *tpircS* or xdm.source.process.command_line = *ssecorp* or xdm.source.process.command_line = *llehsrewop* or xdm.source.process.command_line = *esnopser* or xdm.source.process.command_line = *daolnwod* or xdm.source.process.command_line = *tneilCbeW* or xdm.source.process.command_line = *tneilc* or xdm.source.process.command_line = *ptth* or xdm.source.process.command_line = *elifotevas* or xdm.source.process.command_line = *46esab* or xdm.source.process.command_line = *htaPpmeTteG* or xdm.source.process.command_line = *tcejbO* or xdm.source.process.command_line = *maerts* or xdm.source.process.command_line = *hcaerof* or xdm.source.process.command_line = *retupmoc*) and not (xdm.source.process.command_line = * -EncodedCommand * or xdm.source.process.command_line = * -enc *)",
      "rule_info": {
        "title": "Potential PowerShell Obfuscation Via Reversed Commands",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community, Tim Shelton"
      },
      "execution_time": 0.009447813034057617
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_powershell_create_service.yml",
      "filename": "proc_creation_win_powershell_create_service.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.command_line = *New-Service* and xdm.source.process.command_line = *-BinaryPathName*",
      "rule_info": {
        "title": "New Service Creation Using PowerShell",
        "level": "low",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Timur Zinniatullin, Daniil Yugoslavskiy, oscd.community"
      },
      "execution_time": 0.005921840667724609
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_powershell_downgrade_attack.yml",
      "filename": "proc_creation_win_powershell_downgrade_attack.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\powershell.exe and (xdm.source.process.command_line = * -version 2 * or xdm.source.process.command_line = * -versio 2 * or xdm.source.process.command_line = * -versi 2 * or xdm.source.process.command_line = * -vers 2 * or xdm.source.process.command_line = * -ver 2 * or xdm.source.process.command_line = * -ve 2 * or xdm.source.process.command_line = * -v 2 *)",
      "rule_info": {
        "title": "Potential PowerShell Downgrade Attack",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Harish Segar (rule)"
      },
      "execution_time": 0.0066454410552978516
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_powershell_download_com_cradles.yml",
      "filename": "proc_creation_win_powershell_download_com_cradles.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.command_line = *[Type]::GetTypeFromCLSID(* and (xdm.source.process.command_line = *0002DF01-0000-0000-C000-000000000046* or xdm.source.process.command_line = *F6D90F16-9C73-11D3-B32E-00C04F990BB4* or xdm.source.process.command_line = *F5078F35-C551-11D3-89B9-0000F81FE221* or xdm.source.process.command_line = *88d96a0a-f192-11d4-a65f-0040963251e5* or xdm.source.process.command_line = *AFBA6B42-5692-48EA-8141-DC517DCF0EF1* or xdm.source.process.command_line = *AFB40FFD-B609-40A3-9828-F88BBE11E4E3* or xdm.source.process.command_line = *88d96a0b-f192-11d4-a65f-0040963251e5* or xdm.source.process.command_line = *2087c2f4-2cef-4953-a8ab-66779b670495* or xdm.source.process.command_line = *000209FF-0000-0000-C000-000000000046* or xdm.source.process.command_line = *00024500-0000-0000-C000-000000000046*)",
      "rule_info": {
        "title": "Potential COM Objects Download Cradles Usage - Process Creation",
        "level": "medium",
        "logsource": {
          "product": "windows",
          "category": "process_creation"
        },
        "author": "frack113"
      },
      "execution_time": 0.0060596466064453125
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_powershell_download_iex.yml",
      "filename": "proc_creation_win_powershell_download_iex.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.command_line = *.DownloadString(* or xdm.source.process.command_line = *.DownloadFile(* or xdm.source.process.command_line = *Invoke-WebRequest * or xdm.source.process.command_line = *iwr * or xdm.source.process.command_line = *Invoke-RestMethod * or xdm.source.process.command_line = *irm *) and (xdm.source.process.command_line = *;iex $* or xdm.source.process.command_line = *| IEX* or xdm.source.process.command_line = *|IEX * or xdm.source.process.command_line = *I`E`X* or xdm.source.process.command_line = *I`EX* or xdm.source.process.command_line = *IE`X* or xdm.source.process.command_line = *iex * or xdm.source.process.command_line = *IEX (* or xdm.source.process.command_line = *IEX(* or xdm.source.process.command_line = *Invoke-Expression*)",
      "rule_info": {
        "title": "PowerShell Download and Execution Cradles",
        "level": "high",
        "logsource": {
          "product": "windows",
          "category": "process_creation"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.006844043731689453
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_powershell_download_susp_file_sharing_domains.yml",
      "filename": "proc_creation_win_powershell_download_susp_file_sharing_domains.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\powershell.exe or xdm.source.process.name = *\\pwsh.exe or xdm.source.process.executable.filename = PowerShell.EXE or xdm.source.process.executable.filename = pwsh.dll) and (xdm.source.process.command_line = *anonfiles.com* or xdm.source.process.command_line = *cdn.discordapp.com* or xdm.source.process.command_line = *ddns.net* or xdm.source.process.command_line = *dl.dropboxusercontent.com* or xdm.source.process.command_line = *ghostbin.co* or xdm.source.process.command_line = *glitch.me* or xdm.source.process.command_line = *gofile.io* or xdm.source.process.command_line = *hastebin.com* or xdm.source.process.command_line = *mediafire.com* or xdm.source.process.command_line = *mega.nz* or xdm.source.process.command_line = *onrender.com* or xdm.source.process.command_line = *pages.dev* or xdm.source.process.command_line = *paste.ee* or xdm.source.process.command_line = *pastebin.com* or xdm.source.process.command_line = *pastebin.pl* or xdm.source.process.command_line = *pastetext.net* or xdm.source.process.command_line = *pixeldrain.com* or xdm.source.process.command_line = *privatlab.com* or xdm.source.process.command_line = *privatlab.net* or xdm.source.process.command_line = *send.exploit.in* or xdm.source.process.command_line = *sendspace.com* or xdm.source.process.command_line = *storage.googleapis.com* or xdm.source.process.command_line = *storjshare.io* or xdm.source.process.command_line = *supabase.co* or xdm.source.process.command_line = *temp.sh* or xdm.source.process.command_line = *transfer.sh* or xdm.source.process.command_line = *trycloudflare.com* or xdm.source.process.command_line = *ufile.io* or xdm.source.process.command_line = *w3spaces.com* or xdm.source.process.command_line = *workers.dev*) and (xdm.source.process.command_line = *.DownloadString(* or xdm.source.process.command_line = *.DownloadFile(* or xdm.source.process.command_line = *Invoke-WebRequest * or xdm.source.process.command_line = *iwr * or xdm.source.process.command_line = *wget *)",
      "rule_info": {
        "title": "Potentially Suspicious File Download From File Sharing Domain Via PowerShell.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.010139226913452148
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_powershell_dsinternals_cmdlets.yml",
      "filename": "proc_creation_win_powershell_dsinternals_cmdlets.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.command_line = *Add-ADDBSidHistory* or xdm.source.process.command_line = *Add-ADNgcKey* or xdm.source.process.command_line = *Add-ADReplNgcKey* or xdm.source.process.command_line = *ConvertFrom-ADManagedPasswordBlob* or xdm.source.process.command_line = *ConvertFrom-GPPrefPassword* or xdm.source.process.command_line = *ConvertFrom-ManagedPasswordBlob* or xdm.source.process.command_line = *ConvertFrom-UnattendXmlPassword* or xdm.source.process.command_line = *ConvertFrom-UnicodePassword* or xdm.source.process.command_line = *ConvertTo-AADHash* or xdm.source.process.command_line = *ConvertTo-GPPrefPassword* or xdm.source.process.command_line = *ConvertTo-KerberosKey* or xdm.source.process.command_line = *ConvertTo-LMHash* or xdm.source.process.command_line = *ConvertTo-MsoPasswordHash* or xdm.source.process.command_line = *ConvertTo-NTHash* or xdm.source.process.command_line = *ConvertTo-OrgIdHash* or xdm.source.process.command_line = *ConvertTo-UnicodePassword* or xdm.source.process.command_line = *Disable-ADDBAccount* or xdm.source.process.command_line = *Enable-ADDBAccount* or xdm.source.process.command_line = *Get-ADDBAccount* or xdm.source.process.command_line = *Get-ADDBBackupKey* or xdm.source.process.command_line = *Get-ADDBDomainController* or xdm.source.process.command_line = *Get-ADDBGroupManagedServiceAccount* or xdm.source.process.command_line = *Get-ADDBKdsRootKey* or xdm.source.process.command_line = *Get-ADDBSchemaAttribute* or xdm.source.process.command_line = *Get-ADDBServiceAccount* or xdm.source.process.command_line = *Get-ADDefaultPasswordPolicy* or xdm.source.process.command_line = *Get-ADKeyCredential* or xdm.source.process.command_line = *Get-ADPasswordPolicy* or xdm.source.process.command_line = *Get-ADReplAccount* or xdm.source.process.command_line = *Get-ADReplBackupKey* or xdm.source.process.command_line = *Get-ADReplicationAccount* or xdm.source.process.command_line = *Get-ADSIAccount* or xdm.source.process.command_line = *Get-AzureADUserEx* or xdm.source.process.command_line = *Get-BootKey* or xdm.source.process.command_line = *Get-KeyCredential* or xdm.source.process.command_line = *Get-LsaBackupKey* or xdm.source.process.command_line = *Get-LsaPolicy* or xdm.source.process.command_line = *Get-SamPasswordPolicy* or xdm.source.process.command_line = *Get-SysKey* or xdm.source.process.command_line = *Get-SystemKey* or xdm.source.process.command_line = *New-ADDBRestoreFromMediaScript* or xdm.source.process.command_line = *New-ADKeyCredential* or xdm.source.process.command_line = *New-ADNgcKey* or xdm.source.process.command_line = *New-NTHashSet* or xdm.source.process.command_line = *Remove-ADDBObject* or xdm.source.process.command_line = *Save-DPAPIBlob* or xdm.source.process.command_line = *Set-ADAccountPasswordHash* or xdm.source.process.command_line = *Set-ADDBAccountPassword* or xdm.source.process.command_line = *Set-ADDBBootKey* or xdm.source.process.command_line = *Set-ADDBDomainController* or xdm.source.process.command_line = *Set-ADDBPrimaryGroup* or xdm.source.process.command_line = *Set-ADDBSysKey* or xdm.source.process.command_line = *Set-AzureADUserEx* or xdm.source.process.command_line = *Set-LsaPolicy* or xdm.source.process.command_line = *Set-SamAccountPasswordHash* or xdm.source.process.command_line = *Set-WinUserPasswordHash* or xdm.source.process.command_line = *Test-ADDBPasswordQuality* or xdm.source.process.command_line = *Test-ADPasswordQuality* or xdm.source.process.command_line = *Test-ADReplPasswordQuality* or xdm.source.process.command_line = *Test-PasswordQuality* or xdm.source.process.command_line = *Unlock-ADDBAccount* or xdm.source.process.command_line = *Write-ADNgcKey* or xdm.source.process.command_line = *Write-ADReplNgcKey*",
      "rule_info": {
        "title": "DSInternals Suspicious PowerShell Cmdlets",
        "level": "high",
        "logsource": {
          "product": "windows",
          "category": "process_creation"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems), Nounou Mbeiri"
      },
      "execution_time": 0.016022205352783203
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_powershell_exec_data_file.yml",
      "filename": "proc_creation_win_powershell_exec_data_file.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.command_line = *iex * or xdm.source.process.command_line = *Invoke-Expression * or xdm.source.process.command_line = *Invoke-Command * or xdm.source.process.command_line = *icm *) and (xdm.source.process.command_line = *cat * or xdm.source.process.command_line = *get-content * or xdm.source.process.command_line = *type *) and xdm.source.process.command_line = * -raw*",
      "rule_info": {
        "title": "Powershell Inline Execution From A File",
        "level": "medium",
        "logsource": {
          "product": "windows",
          "category": "process_creation"
        },
        "author": "frack113"
      },
      "execution_time": 0.010787248611450195
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_powershell_iex_patterns.yml",
      "filename": "proc_creation_win_powershell_iex_patterns.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\powershell.exe or xdm.source.process.name = *\\pwsh.exe) and (xdm.source.process.command_line = * | iex;* or xdm.source.process.command_line = * | iex * or xdm.source.process.command_line = * | iex}* or xdm.source.process.command_line = * | IEX ;* or xdm.source.process.command_line = * | IEX -Error* or xdm.source.process.command_line = * | IEX (new* or xdm.source.process.command_line = *);IEX *) and (xdm.source.process.command_line = *::FromBase64String* or xdm.source.process.command_line = *.GetString([System.Convert]::*) or xdm.source.process.command_line = *)|iex;$* or xdm.source.process.command_line = *);iex($* or xdm.source.process.command_line = *);iex $* or xdm.source.process.command_line = * | IEX | * or xdm.source.process.command_line = * | iex\\\"*",
      "rule_info": {
        "title": "Suspicious PowerShell IEX Execution Patterns",
        "level": "high",
        "logsource": {
          "product": "windows",
          "category": "process_creation"
        },
        "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.013578176498413086
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_powershell_import_cert_susp_locations.yml",
      "filename": "proc_creation_win_powershell_import_cert_susp_locations.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Root Certificate Installed From Susp Locations",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.009469747543334961,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_powershell_msexchange_transport_agent.yml",
      "filename": "proc_creation_win_powershell_msexchange_transport_agent.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.command_line = *Install-TransportAgent*",
      "rule_info": {
        "title": "MSExchange Transport Agent Installation",
        "level": "medium",
        "logsource": {
          "product": "windows",
          "category": "process_creation"
        },
        "author": "Tobias Michalski (Nextron Systems)"
      },
      "execution_time": 0.007238864898681641
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_powershell_obfuscation_via_utf8.yml",
      "filename": "proc_creation_win_powershell_obfuscation_via_utf8.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.command_line = *[char]0x* or xdm.source.process.command_line = *(WCHAR)0x*",
      "rule_info": {
        "title": "Potential PowerShell Obfuscation Via WCHAR/CHAR",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.008246660232543945
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_powershell_token_obfuscation.yml",
      "filename": "proc_creation_win_powershell_token_obfuscation.yml",
      "status": "failed",
      "error": "'NoneType' object has no attribute 'join' (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Powershell Token Obfuscation - Process Creation",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "frack113"
      },
      "execution_time": 0.008837223052978516,
      "error_type": "AttributeError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1219, in <genexpr>\n    else self.convert_condition_group(arg, state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 446, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_re(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1534, in convert_condition_field_eq_val_re\n    regex=self.convert_value_re(cond.value, state),\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1506, in convert_value_re\n    return r.escape(\n           ^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 736, in escape\n    return prefix + escape_char.join([self.regexp[i:j] for i, j in ranges])\n                    ^^^^^^^^^^^^^^^^\nAttributeError: 'NoneType' object has no attribute 'join' (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_pressanykey_lolbin_execution.yml",
      "filename": "proc_creation_win_pressanykey_lolbin_execution.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdr_data.causality_actor_process_image_path = *\\Microsoft.NodejsTools.PressAnyKey.exe",
      "rule_info": {
        "title": "Visual Studio NodejsTools PressAnyKey Arbitrary Binary Execution",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.005527496337890625
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_remote_access_tools_gotoopener.yml",
      "filename": "proc_creation_win_remote_access_tools_gotoopener.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.event.description = GoTo Opener or xdr_data.actor_process_signature_product = GoTo Opener or xdm.source.process.company = LogMeIn, Inc.",
      "rule_info": {
        "title": "Remote Access Tool - GoToAssist Execution",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "frack113"
      },
      "execution_time": 0.0051310062408447266
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_rundll32_mshtml_runhtmlapplication.yml",
      "filename": "proc_creation_win_rundll32_mshtml_runhtmlapplication.yml",
      "status": "failed",
      "error": "Operator 'and' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Mshtml.DLL RunHTMLApplication Suspicious Usage",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems),  Florian Roth (Nextron Systems), Josh Nickels, frack113, Zaw Min Htun (ZETA)"
      },
      "execution_time": 0.008045673370361328,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1227, in convert_condition_and\n    raise NotImplementedError(\"Operator 'and' not supported by the backend\")\nNotImplementedError: Operator 'and' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_rundll32_no_params.yml",
      "filename": "proc_creation_win_rundll32_no_params.yml",
      "status": "failed",
      "error": "Operator 'or' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Rundll32 Execution Without CommandLine Parameters",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.00677490234375,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 60, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 544, in convert_condition\n    return self.convert_condition_not(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1237, in convert_condition_not\n    self.not_token + self.token_separator + self.convert_condition_group(arg, state)\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1177, in convert_condition_or\n    raise NotImplementedError(\"Operator 'or' not supported by the backend\")\nNotImplementedError: Operator 'or' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_rundll32_susp_activity.yml",
      "filename": "proc_creation_win_rundll32_susp_activity.yml",
      "status": "failed",
      "error": "Operator 'and' not supported by the backend (while converting rule None)",
      "query": null,
      "rule_info": {
        "title": "Potentially Suspicious Rundll32 Activity",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "juju4, Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.018750905990600586,
      "error_type": "NotImplementedError",
      "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 546, in convert_condition\n    return self.convert_condition_field_eq_val(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 438, in convert_condition_field_eq_val\n    return self.convert_condition_field_eq_val_str(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 66, in convert_condition_field_eq_val_str\n    value=self.convert_value_str(cond.value, state)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1328, in convert_value_str\n    converted = s.convert(\n                ^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/types.py\", line 559, in convert\n    s += escape_char\nTypeError: can only concatenate str (not \"NoneType\") to str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/test_sigma_converter.py\", line 94, in test_single_rule\n    conversion_result = self.backend.convert_rule(sigma_rule)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/cortex/backends/cortexxsiam.py\", line 71, in convert_rule\n    converted = super().convert_rule(rule, output_format)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 203, in convert_rule\n    queries = [\n              ^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 204, in <listcomp>\n    self.convert_condition(cond.parsed, states[index])\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1212, in convert_condition_and\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1213, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1217, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 544, in convert_condition\n    return self.convert_condition_not(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1237, in convert_condition_not\n    self.not_token + self.token_separator + self.convert_condition_group(arg, state)\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1145, in convert_condition_group\n    expr = self.convert_condition(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 537, in convert_condition\n    return self.convert_condition_or(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1162, in convert_condition_or\n    return joiner.join(\n           ^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1163, in <genexpr>\n    (\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1167, in <genexpr>\n    self.convert_condition(arg, state)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 542, in convert_condition\n    return self.convert_condition_and(cond, state)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/sigma/conversion/base.py\", line 1227, in convert_condition_and\n    raise NotImplementedError(\"Operator 'and' not supported by the backend\")\nNotImplementedError: Operator 'and' not supported by the backend (while converting rule None)\n"
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_rundll32_susp_control_dll_load.yml",
      "filename": "proc_creation_win_rundll32_susp_control_dll_load.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdr_data.causality_actor_process_image_path = *\\System32\\control.exe and (xdm.source.process.name = *\\rundll32.exe or xdm.source.process.executable.filename = RUNDLL32.EXE) and not xdm.source.process.command_line = *Shell32.dll*",
      "rule_info": {
        "title": "Suspicious Control Panel DLL Load",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.005880832672119141
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_rundll32_user32_dll.yml",
      "filename": "proc_creation_win_rundll32_user32_dll.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\rundll32.exe or xdm.source.process.executable.filename = RUNDLL32.EXE) and xdr_data.causality_actor_process_image_path = *\\cmd.exe and xdm.source.process.command_line = *user32.dll,* and xdm.source.process.command_line = *LockWorkStation*",
      "rule_info": {
        "title": "Suspicious Workstation Locking via Rundll32",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "frack113"
      },
      "execution_time": 0.0053730010986328125
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_rundll32_without_parameters.yml",
      "filename": "proc_creation_win_rundll32_without_parameters.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.command_line = rundll32.exe or xdm.source.process.command_line = rundll32",
      "rule_info": {
        "title": "Rundll32 Execution Without Parameters",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Bartlomiej Czyz, Relativity"
      },
      "execution_time": 0.004870891571044922
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_sc_disable_service.yml",
      "filename": "proc_creation_win_sc_disable_service.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\sc.exe or xdm.source.process.executable.filename = sc.exe) and xdm.source.process.command_line = * config * and xdm.source.process.command_line = *start* and (xdm.source.process.command_line = *disabled* or xdm.source.process.command_line = *demand*)",
      "rule_info": {
        "title": "Service StartupType Change Via Sc.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.005723476409912109
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_sc_new_kernel_driver.yml",
      "filename": "proc_creation_win_sc_new_kernel_driver.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\sc.exe and (xdm.source.process.command_line = *create* or xdm.source.process.command_line = *config*) and xdm.source.process.command_line = *binPath* and xdm.source.process.command_line = *type* and xdm.source.process.command_line = *kernel*",
      "rule_info": {
        "title": "New Kernel Driver Via SC.EXE",
        "level": "medium",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.004820823669433594
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_sc_sdset_allow_service_changes.yml",
      "filename": "proc_creation_win_sc_sdset_allow_service_changes.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.name = *\\sc.exe or xdm.source.process.executable.filename = sc.exe) and xdm.source.process.command_line = *sdset* and xdm.source.process.command_line = *A;* and (xdm.source.process.command_line = *;IU* or xdm.source.process.command_line = *;SU* or xdm.source.process.command_line = *;BA* or xdm.source.process.command_line = *;SY* or xdm.source.process.command_line = *;WD*)",
      "rule_info": {
        "title": "Allow Service Access Using Security Descriptor Tampering Via Sc.EXE",
        "level": "high",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.006162881851196289
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_sc_stop_service.yml",
      "filename": "proc_creation_win_sc_stop_service.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter (xdm.source.process.executable.filename = sc.exe or xdm.source.process.name = *\\sc.exe) and xdm.source.process.command_line = * stop *",
      "rule_info": {
        "title": "Stop Windows Service Via Sc.EXE",
        "level": "low",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Jakob Weinzettl, oscd.community, Nasreddine Bencherchali (Nextron Systems)"
      },
      "execution_time": 0.005492448806762695
    },
    {
      "file": "downloaded_rules/comprehensive/process_creation/proc_creation_win_schtasks_creation.yml",
      "filename": "proc_creation_win_schtasks_creation.yml",
      "status": "success",
      "error": null,
      "query": "datamodel dataset = * | filter xdm.source.process.name = *\\schtasks.exe and xdm.source.process.command_line = * /create * and not (xdm.source.user.username = *AUTHORI* or xdm.source.user.username = *AUTORI*)",
      "rule_info": {
        "title": "Scheduled Task Creation Via Schtasks.EXE",
        "level": "low",
        "logsource": {
          "category": "process_creation",
          "product": "windows"
        },
        "author": "Florian Roth (Nextron Systems)"
      },
      "execution_time": 0.006096601486206055
    }
  ]
}